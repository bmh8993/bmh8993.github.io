{"componentChunkName":"component---src-templates-post-template-jsx","path":"/cs/network/about-http/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"3dbe9445-3dd6-5c40-b4f8-495dfa3b036a","html":"<h2>HTTP</h2>\n<p>HyperText Transfer Protocol</p>\n<ul>\n<li>하이퍼텍스트(HTML) 문서를 교환하기 위해 만들어진 protocol(통신 규약).</li>\n<li>\n<p>즉, HTML 문서를 주고 받을 때 원활한 소통을 위한 약속이다.</p>\n<ul>\n<li>즉 웹상에서 네트워크로 서버끼리 통신을 할때 어떠한 형식으로 서로 통신을 하자고 규정해 놓은 “통신 형식” 혹은 “통신 구조” 라고 보면 된다.</li>\n<li>프론트앤드 서버와 클라이언트간의 통신에 사용된다.</li>\n<li>또한 백앤드와 프론트앤드 서버간에의 통신에도 사용된다.</li>\n</ul>\n</li>\n<li>HTTP는 TCP/IP 기반으로 되어있다.</li>\n</ul>\n<h1>HTTP 핵심요소</h1>\n<h2>1. 통신 방식</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 기본적으로 request/respose 구조로 이루어져 있다.\n    - 클라이언트와 서버의 모든 통신이 요청과 응답으로 이루어 진다.\n- HTTP는 Stateless 이다.\n    - 말그대로 상태를 저장하지 않는다.\n    - 예를 들어, 클라이언트가 요청을 보내고 응답을 받은 후, 조금 있다가 다시 요청을 보낼 때, 전에 보낸 요청/응답에 대해 알지 못한다.\n    - 그래서 만일 여러 요청과 응답의 진행 과정이나 데이터가 필요할 때는 쿠키나 세션 등등을 사용하게 된다.</code></pre></div>\n<h2>2. HTTP request 구조</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 메쏘드 URI HTTPversion\n2. Request Headers\n3.\n4.body</code></pre></div>\n<p>위와 같이 구조인데,<br>\n<strong>첫째줄은 Start Line</strong><br>\n해당 request가 의도한 action/해당 request가 전송되는 목표 uri/사용되는 HTTP 버젼<br>\n<strong>둘째줄은 headers</strong><br>\n해당 request에 대한 추가 정보를 담는부분이다.<br>\nKey:Value값으로 되어져 있다.<br>\nHOST: google.com => key = HOST, value = google.com<br>\n<strong>셋째줄은 headers와 body를 구분</strong><br>\n<strong>넷째줄은 body</strong><br>\n해당 request의 실제 메세지/내용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1.GET /index.html HTTP/1.1\n2.Host: bmh.kr\n3.Connection: keep-alive\n4.\n5.name=min&amp;age=27</code></pre></div>\n<p>위의 request를 읽어보면,<br>\n<code class=\"language-text\">HTTP/1.1 버전</code>의 프로토콜로 <code class=\"language-text\">GET방식</code>으로 호스트가 <code class=\"language-text\">min.kr</code>인 곳의 /<code class=\"language-text\">index.html</code>을 가져와라.<br>\n가져오는데 <code class=\"language-text\">연결(connection)</code>은 <code class=\"language-text\">지속적(keep-alive)</code>인 방식으로 하며 <code class=\"language-text\">name</code>과 <code class=\"language-text\">age</code>라는 파라미터를 만들어서 각각 <code class=\"language-text\">min</code>과 27을 값으로 담아 같이 보내자.<br></p>\n<p><strong>자주 사용되는 header 정보</strong><br>\n<img src=\"./img/headers_info.png\" alt=\"headers_info\"></p>\n<p><strong>Request Action</strong>\n<img src=\"./img/http_request_method.png\" alt=\"request_method\"></p>\n<h2>3. HTTP request 구조</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. HTTP 버전 상태코드 설명\n2. Response Headers\n3.\n4.body</code></pre></div>\n<p>위와 같이 구조인데,<br>\n<strong>첫째줄은 Status Line</strong><br>\n해당 response의 상태를 나타내주는데,<br>\nHHTP 버전/status code/status text<br>\n<strong>둘째줄은 headers</strong><br>\nrequest의 header와 동일하다.<br>\n다만, response에서만 사용되는 header값들이 있다.<br>\n예를들어, <code class=\"language-text\">User-Agent</code>대신에 <code class=\"language-text\">Server</code>헤더가 사용된다.<br>\n<strong>셋째줄은 headers와 body를 구분</strong><br>\n<strong>넷째줄은 body</strong><br>\nrequest의 header와 동일하다.<br>\nrequest와 마찬가지로 모든 response가 body를 가지고 있지는 않다. 데이터를 전송할 필요가 없을 경우에는 body가 비어있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. HTTP/1.1 200 OK\n2. Date: Tue, 10 Jul 2012 06:50:15 GMT\n3. Content-Length:362\n4. Content-type:text/html\n5.\n6. &lt;html&gt;\n7. ...</code></pre></div>\n<p>위의 response를 읽어보면,<br>\n<code class=\"language-text\">HTTP/1.1 버전</code>의 프로토콜로 request에 대한 처리 결과는<code class=\"language-text\">200</code>이다. 다시말해 <code class=\"language-text\">OK</code>이다.<br>\n내가 전달할 메시지는 <code class=\"language-text\">2012년 7월 10일 화요일 6분 50분 15초</code>에 만들어 졌으며,<br>\n내용의 길이는 <code class=\"language-text\">362</code>이고 내용은 <code class=\"language-text\">text/html</code>타입이다.보낼 내용은 <code class=\"language-text\">&lt;html&gt;</code>…이다.\n<br>\n<strong>자주 쓰이는 HTTP Status Code</strong><br>\n<img src=\"./img/http_status_code.png\" alt=\"http_status_code\"></p>\n<h1>그래서 왜 배우는데???</h1>\n<h2>HTTP 메세지</h2>\n<p>HHTP 메세지는 서버와 클라이언트 간에 데이터가 교환되는 방식이다.<br>\n<strong>교환되는 방식이면서, 정보가 담겨있다. 우리는 이 정보를 처리해야하므로 HTTP가 중요하다.</strong><br>\n장고를 하면서 HTTP를 아는 것이 왜 중요한지 알게되었다.<br>\n공부할 것이 많다! REST API도 알아야한다!!!!!<br>\n이건 다음시간에</p>","fields":{"tagSlugs":["/tags/http/"],"slug":"/cs/network/about-http/"},"frontmatter":{"title":"About Http","tags":["http"],"date":"2019-08-20T20:27:37.000Z","description":"HTTP에 대해서 알아봅시다.","path":"/cs/network/about-http/","category":"network"},"tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/cs/network/about-http/#http\">HTTP</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cs/network/about-http/#http-%ED%95%B5%EC%8B%AC%EC%9A%94%EC%86%8C\">HTTP 핵심요소</a></p>\n<ul>\n<li><a href=\"/cs/network/about-http/#1-%ED%86%B5%EC%8B%A0-%EB%B0%A9%EC%8B%9D\">1. 통신 방식</a></li>\n<li><a href=\"/cs/network/about-http/#2-http-request-%EA%B5%AC%EC%A1%B0\">2. HTTP request 구조</a></li>\n<li><a href=\"/cs/network/about-http/#3-http-request-%EA%B5%AC%EC%A1%B0\">3. HTTP request 구조</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/cs/network/about-http/#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%99%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94%EB%8D%B0\">그래서 왜 배우는데???</a></p>\n<ul>\n<li><a href=\"/cs/network/about-http/#http-%EB%A9%94%EC%84%B8%EC%A7%80\">HTTP 메세지</a></li>\n</ul>\n</li>\n</ul>","headings":[{"value":"HTTP","depth":2},{"value":"HTTP 핵심요소","depth":1},{"value":"1. 통신 방식","depth":2},{"value":"2. HTTP request 구조","depth":2},{"value":"3. HTTP request 구조","depth":2},{"value":"그래서 왜 배우는데???","depth":1},{"value":"HTTP 메세지","depth":2}]}},"pageContext":{"slug":"/cs/network/about-http/"}},"staticQueryHashes":[]}