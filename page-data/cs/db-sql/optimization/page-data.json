{"componentChunkName":"component---src-templates-post-template-jsx","path":"/cs/db-sql/optimization/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"e6a69a92-4815-5176-9dae-11b119c58b78","html":"<h2>1. 옵티마이저와 실행계획</h2>\n<h3>1-1. 옵티마이저</h3>\n<ul>\n<li>옵티마이저는 사용자가 질의한 SQL문에 대해 최적의 실행 방법을 결정하는 역할을 한다.</li>\n<li>이를 통해 개발자가 SQL이 동작하는 과정을 직접 코딩 할 필요가 없어졌다.</li>\n<li>이전에는 테이블을 기준 테이블을 select하고 fetch하고, 반대편 테이블에서 조인 레코드를\nseek하는 과정을 loop하는 이 과정을 직접 개발했어야했다.</li>\n<li>DBMS의 핵심기능이다.</li>\n</ul>\n<h4>옵티마이저의 최적화 수행 단계를 요약하면 아래와 같다.</h4>\n<ol>\n<li>사용자가 던진 쿼리 수행을 위해 후보군이 될만한 실행계획들을 찾아냄</li>\n<li>데이터 딕셔너리에 미리 수집해 놓은 오브젝트 통계 및 시스템 통계정보를 이용해\n각 실행 단계의 예상비용을 산정</li>\n<li>각 실행계획의 비용을 비교해서 최소비용을 갖는 하나를 선택</li>\n</ol>\n<h3>1-2. 실행 계획(Execution Plan)</h3>\n<ul>\n<li><strong>조인순서</strong>: 논리적으로 가능한 순서는 n! 개</li>\n<li><strong>조인 기법</strong>: NL Join / Hash Join / Sort Merge Join</li>\n<li><strong>액세스 기법</strong>: 인덱스 스캔 / 전체 테이블 스캔</li>\n<li><strong>최적화 정보</strong>: 비용기반최적화-Cost / Card / Bytes (통계정보를 바탕으로 한 예상치)</li>\n<li><strong>연산</strong> : 조인기법, 액세스기법, 필터, 정렬(order by), 집계, 뷰 등 다양함</li>\n</ul>\n<h2>2. 인덱스</h2>\n<ul>\n<li><strong>목적</strong>: 검색 성능의 최적화</li>\n<li>인덱스는 테이블을 기반으로 선택적으로 생성할 수 있는 구조</li>\n<li>인덱스는 데이블에 생성하지 않아도 되고 여러 개 생성해도 된다.</li>\n<li>인덱스 칼럼 순서는 질의 성능에 중요한 영향을 미치는 요소이다.</li>\n<li>트리기반 인덱스에는 B-트리 인덱스, 비트맵 인덱스, 리버스 키 인덱스. 함수기반 인덱스 등 존재한다</li>\n</ul>\n<h2>3. 조인수행원리</h2>\n<ul>\n<li>두 개 이상의 테이블을 하나의 집합으로 만드는 연산을 조인이라고 한다.</li>\n<li>FROM절에 두 개 이상의 테이블이 나열된 경우 조인이 수행된다.</li>\n<li>조인 단계별로 다른 조인 기법을 사용할 수 있다.</li>\n</ul>\n<hr>\n<p>ref: <a href=\"https://m.blog.naver.com/0325han/221225506802\">SQL 최적화 기본원리 : 옵티마이저와 실행계획 / 인덱스 / 조인수행원리</a><br>\nref: <a href=\"https://cornswrold.tistory.com/120\">DBMS 아키텍처</a><br>\nref: <a href=\"https://jeong-pro.tistory.com/157\">SQL 파싱 처리 과정과 성능 향상 포인트 최적화!</a></p>","fields":{"tagSlugs":["/tags/database/"],"slug":"/cs/db-sql/optimization/"},"frontmatter":{"title":"SQL 최적화의 기본 원리(옵티마이저와 실행계획/인덱스/조인수행원리)","tags":["database"],"date":"2020-07-03T12:07:16.000Z","description":"SQL 최적화의 기본 원리에 대해서 알아봅시다.","path":"/cs/db-sql/optimization/","category":"DB&SQL"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/cs/db-sql/optimization/#1-%EC%98%B5%ED%8B%B0%EB%A7%88%EC%9D%B4%EC%A0%80%EC%99%80-%EC%8B%A4%ED%96%89%EA%B3%84%ED%9A%8D\">1. 옵티마이저와 실행계획</a></p>\n<ul>\n<li>\n<p><a href=\"/cs/db-sql/optimization/#1-1-%EC%98%B5%ED%8B%B0%EB%A7%88%EC%9D%B4%EC%A0%80\">1-1. 옵티마이저</a></p>\n<ul>\n<li><a href=\"/cs/db-sql/optimization/#%EC%98%B5%ED%8B%B0%EB%A7%88%EC%9D%B4%EC%A0%80%EC%9D%98-%EC%B5%9C%EC%A0%81%ED%99%94-%EC%88%98%ED%96%89-%EB%8B%A8%EA%B3%84%EB%A5%BC-%EC%9A%94%EC%95%BD%ED%95%98%EB%A9%B4-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EB%8B%A4\">옵티마이저의 최적화 수행 단계를 요약하면 아래와 같다.</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/db-sql/optimization/#1-2-%EC%8B%A4%ED%96%89-%EA%B3%84%ED%9A%8Dexecution-plan\">1-2. 실행 계획(Execution Plan)</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/db-sql/optimization/#2-%EC%9D%B8%EB%8D%B1%EC%8A%A4\">2. 인덱스</a></li>\n<li><a href=\"/cs/db-sql/optimization/#3-%EC%A1%B0%EC%9D%B8%EC%88%98%ED%96%89%EC%9B%90%EB%A6%AC\">3. 조인수행원리</a></li>\n</ul>","headings":[{"value":"1. 옵티마이저와 실행계획","depth":2},{"value":"1-1. 옵티마이저","depth":3},{"value":"옵티마이저의 최적화 수행 단계를 요약하면 아래와 같다.","depth":4},{"value":"1-2. 실행 계획(Execution Plan)","depth":3},{"value":"2. 인덱스","depth":2},{"value":"3. 조인수행원리","depth":2}]}},"pageContext":{"slug":"/cs/db-sql/optimization/"}},"staticQueryHashes":[]}