{"componentChunkName":"component---src-templates-post-template-jsx","path":"/cs/db-sql/postgresql-backup-restore/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"b7b2f5f0-56a6-5c74-aa84-d5d88f6971c5","html":"<p>서버 배포 이후 매일 DB backup 파일일 만들어야 한다. CLI로 어떻게 진행이 가능한지 남기려한다.</p>\n<h1>Backup</h1>\n<p>PostgreSQL에서는 DB Backup을 위해 pg_dump와 pg_dumpall 프로그램을 제공한다.</p>\n<ol>\n<li>dg_dump는 단일 Database를 요청한 Format으로 Bakup을 만든다.</li>\n<li>pg_dumpall는 전체 Database Cluster를 SQL script로 Backup 한다.</li>\n</ol>\n<p>해당 글에서는 pg_dump에 관해서만 다룰 예정이다. pg_dump의 사용 방법은 서버에서 <code class=\"language-text\">db_dump --help</code>를 입력하면 옵션에 대해 자세히 확인 가능하다.</p>\n<p>아래 옵션 및 인자들이 자주 사용하는 것들이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-d, --dbname : Backup할 Database 명.\n-h, --host : Database 주소.\n-U, --username : Database 접속 시 User ID\n-F, --format : Backup Format. 필자는 주로 tar 파일로 backup하기 때문에 &#39;t&#39;를 사용한다.\n-f, --file : Backup File Name\n-t, --table : 특정 Table만 Backup하려할 때 대상이 되는 Table 명\n-j, --jobs : Backup 시 병렬 처리 여부와 그 정도.\n-v, --verbose : 진행 과정 표시.</code></pre></div>\n<h3>사용 예</h3>\n<ul>\n<li><code class=\"language-text\">holaplan</code> DB를 <code class=\"language-text\">tar</code> 형식으로</li>\n<li><code class=\"language-text\">/root/project/db_backup</code> 아래에</li>\n<li><code class=\"language-text\">특정이름</code>으로 backup</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ pg_dump -d <span class=\"token punctuation\">{</span>DB_이름<span class=\"token punctuation\">}</span> -h <span class=\"token punctuation\">{</span>DB_주소<span class=\"token punctuation\">}</span> -U <span class=\"token punctuation\">{</span>DB_유저<span class=\"token punctuation\">}</span> -F t <span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>위치와 이름<span class=\"token punctuation\">}</span>\n$ pg_dump -d holaplan -h xx.xx.xxx.xxx -U postgres -F t <span class=\"token operator\">></span> /root/project/db_backup/test.tar</code></pre></div>\n<p>이렇게 하면 패스워드를 요구한다. 그래서 그냥 패스워드도 커맨드에 넣어버려야지 생각하고 옵션을 사용했으나 너무 많은 옵션이 사용되었다는 메세지를\n받았다.<br>\n그래서 찾아본 것이 <code class=\"language-text\">.pgpass</code><br></p>\n<h3>pgpass</h3>\n<p>pg_hba.conf에서 DB에 접근을 제한하도록 설정하면(접근할 때 패스워드를 요구하는 방식으로) postgres를 command line으로 로그인을 하려면 다음과\n같은 명령어를 사용해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ psql -U <span class=\"token punctuation\">{</span>유저<span class=\"token punctuation\">}</span> -d <span class=\"token punctuation\">{</span>접근하려는 DB<span class=\"token punctuation\">}</span>\n$ psql -U postgres -d postgres</code></pre></div>\n<p>그리고 패스워드를 물어보면 패스워드를 입력하고 접근이 가능하다. 그러나 shell script를 사용하게 되면 위와 같은 문제를 비롯한 귀찮은 일들이\n발생한다. 이럴때 자동으로 로그인이 가능하도록 하는 것이 <code class=\"language-text\">.pgpass</code> 이다.</p>\n<h4>생성</h4>\n<p>생성하는 위치는 root 디렉토리이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">touch</span> ~/.pgpass</code></pre></div>\n<p>안에 들어가는 내용은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">hostname:port:database_name:user_name:password\n*:*:*:user_name:password</code></pre></div>\n<p>앞의 세가지는 *(와일드카드)를 사용하여 입력할 수 있다. 하지만 주의 할 부분이 있는데 db_name에 *를 사용하면 서버와 연결된 모든 DB를 대상으로\n하게 된다.<br>\n그래서 나는 db_name은 특정 db를 지정하도록한다.</p>\n<p>모두 작성하면 권한설정을 해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> ~/.pgpass</code></pre></div>\n<p>소유자에게 읽기와 쓰기권한을 부여하고 그룹소유자와 일반 사용자에게는 어떠한 권한도 부여하지 않겠다는 의미이다.</p>\n<h1>cronjob setting</h1>\n<p>cronjob 리스트를 확인하고 <code class=\"language-text\">크론잡으로 등록</code>해주면된다.<br></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">crontab</span> -e  <span class=\"token comment\"># 해당 옵션으로 등록된 크론탭리스트를 수정할 수 있다.</span></code></pre></div>\n<p>해당 파일에 크론을 등록해주도록 한다.</p>\n<p>기타 여러가지 방법이 있기다 pg_cron 이라는 extension도 존재한다. 하지만 하려는 작업에 적합하지 않은 것 같아서\n어느정도 읽어보고 넘어갔다.</p>\n<h1>Restore</h1>\n<p>pg_restore는 pg_dump를 이용해서 만들어진 DB backup file을 restore 할 때 사용한다.<br>\n단, pg_dumpall로 만들어진 backup file은 sql script라 pg_store를 사용할 수는 없다.<br>\n<br>\npg_restore의 사용 방법은 서버에서 <code class=\"language-text\">db_restore --help</code>를 입력하면 옵션에 대해 자세히 확인 가능하다.</p>\n<p>아래 옵션 및 인자들이 자주 사용하는 것들이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-d, --dbname : Restore하는 Database 명.\n-h, --host : Database 주소.\n-U, --username : Database 접속 시 User ID\n-F, --format : Restore File의 Format.\n-t, --table : 특정 Table만 Restore하려할 때 대상이 되는 Table 명\n-j, --jobs : Restore 시 병렬 처리 여부와 그 정도.\n-v, --verbose : 진행 과정 표시\n-C, --create : Target DB를 새로 만들면서 Restoration 진행.\n-c, --clean : Restoration 시에 같은 이름의 Database Object가 발견되면 Drop 후에 Create하게 함.\n-O, --no-owner : 원본 DB의 Owner가 복구할 위치에 존재하지 않을 경우 복구 시 다량의 에러가 발생한다. 이를 막기 위해  DB 복구시 OWNER를 명시하지 않고 진행하게 함.</code></pre></div>\n<h4>TAG</h4>\n<p><code class=\"language-text\">postgres</code>, <code class=\"language-text\">cronjob</code>, <code class=\"language-text\">linux-permission</code>, <code class=\"language-text\">pgpass</code>, <code class=\"language-text\">pg_hba</code></p>\n<hr>\n<p>REF: <a href=\"https://browndwarf.tistory.com/12\">PostgreSQL DB Backup 및 Restore</a><br>\nREF: <a href=\"https://severalnines.com/database-blog/overview-job-scheduling-tools-postgresql\">An Overview of Job Scheduling Tools for PostgreSQL(cronjob 설정하기)</a><br>\nREF: <a href=\"https://sqlbackupandftp.com/blog/postgresql-job-scheduler\">PostgreSQL Job Scheduler</a><br>\nREF: <a href=\"https://securityspecialist.tistory.com/40\">리눅스 퍼미션 chmod 600</a><br>\nREF: <a href=\"https://stackoverflow.com/questions/50404041/pg-dumpall-without-prompting-password\">pgpass stack-overflow</a><br>\nREF: <a href=\"https://www.cyberciti.biz/faq/how-do-i-add-jobs-to-cron-under-linux-or-unix-oses/\">how to use cron</a></p>\n<hr>\n<h4>추가 사항</h4>\n<h3>리눅스 tar.gz</h3>\n<p>리눅스(Linux)에서의 파일 압축 개념은 윈도우즈(Windows)에서의 파일 압축 개념에 비해 세분화 되어있다.\n윈도우즈에서는 보통 압축을 한다하면, zip 등의 방식으로 선택된 파일이나 폴더들을 묶으면서 동시에 압축(compress)을 하는 것을 의미한다.\n<code class=\"language-text\">반면</code> 리눅스에서는 파일이나 폴더들을 묶는 것(archive)과 실제로 압축(compress)하는 기능이 나뉘어져있다.</p>\n<ul>\n<li>묶는다 = archive</li>\n<li>압축한다 = compress</li>\n</ul>\n<p>리눅스에서 여러 파일을 한 파일로 묶은 것을 아카이브(archive)라 하며 확장자는 <code class=\"language-text\">.tar</code> 이다.<br>\n일반적으로 tar로 묶인 아카이브를 gunzip을 사용해서 .tar.gz 의 확장자를 가지는 압축 아카이브로 많이 사용한다.</p>\n<p>REF: <a href=\"http://sarghis.com/blog/468/\">리눅스 tar.gz와 압축/해제 명령어</a><br>\nREF: <a href=\"https://qastack.kr/unix/277793/why-would-i-tar-a-single-file\">왜 단일 파일을 tar합니까?</a></p>","fields":{"tagSlugs":["/tags/postgresql/"],"slug":"/cs/db-sql/postgresql-backup-restore/"},"frontmatter":{"title":"Postgresql DB backup / restore(+스케줄 작업)","tags":["postgresql"],"date":"2020-09-08T10:10:21.000Z","description":"postgresql에서 backup과 restore 작업을 하는 방법에 대해서 알아봅시다.","path":"/cs/db-sql/postgresql-backup-restore/","category":"DB&SQL"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/cs/db-sql/postgresql-backup-restore/#backup\">Backup</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/cs/db-sql/postgresql-backup-restore/#%EC%82%AC%EC%9A%A9-%EC%98%88\">사용 예</a></li>\n<li>\n<p><a href=\"/cs/db-sql/postgresql-backup-restore/#pgpass\">pgpass</a></p>\n<ul>\n<li><a href=\"/cs/db-sql/postgresql-backup-restore/#%EC%83%9D%EC%84%B1\">생성</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/cs/db-sql/postgresql-backup-restore/#cronjob-setting\">cronjob setting</a></li>\n<li>\n<p><a href=\"/cs/db-sql/postgresql-backup-restore/#restore\">Restore</a></p>\n<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"/cs/db-sql/postgresql-backup-restore/#tag\">TAG</a></li>\n<li><a href=\"/cs/db-sql/postgresql-backup-restore/#%EC%B6%94%EA%B0%80-%EC%82%AC%ED%95%AD\">추가 사항</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/db-sql/postgresql-backup-restore/#%EB%A6%AC%EB%88%85%EC%8A%A4-targz\">리눅스 tar.gz</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","headings":[{"value":"Backup","depth":1},{"value":"사용 예","depth":3},{"value":"pgpass","depth":3},{"value":"생성","depth":4},{"value":"cronjob setting","depth":1},{"value":"Restore","depth":1},{"value":"TAG","depth":4},{"value":"추가 사항","depth":4},{"value":"리눅스 tar.gz","depth":3}]}},"pageContext":{"slug":"/cs/db-sql/postgresql-backup-restore/"}},"staticQueryHashes":[]}