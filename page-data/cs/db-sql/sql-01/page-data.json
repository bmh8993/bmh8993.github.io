{"componentChunkName":"component---src-templates-post-template-jsx","path":"/cs/db-sql/sql-01/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"e16ba845-0a14-581a-b736-bb42137a8e7e","html":"<p>sql이 아닌 django의 orm으로 데이터를 추출하는 것에 익숙한 저는\nraw query를 사용해야하는 일이 생겼습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Header</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    company_no <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'companyNo'</span><span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    company_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'companyName'</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    is_association <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'isAssociation'</span><span class=\"token punctuation\">)</span>\n    is_use <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'isUse'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        managed <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'header'</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    std_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'stdDate'</span><span class=\"token punctuation\">)</span>\n    company_no <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'companyNo'</span><span class=\"token punctuation\">)</span>\n    loan <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BigIntegerField<span class=\"token punctuation\">(</span>blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    repay <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BigIntegerField<span class=\"token punctuation\">(</span>blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    balance <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BigIntegerField<span class=\"token punctuation\">(</span>blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    profit_rate <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DecimalField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'profitRate'</span><span class=\"token punctuation\">,</span> max_digits<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> decimal_places<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    loss_rate <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DecimalField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'lossRate'</span><span class=\"token punctuation\">,</span> max_digits<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> decimal_places<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    overdue_rate <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DecimalField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'overdueRate'</span><span class=\"token punctuation\">,</span> max_digits<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> decimal_places<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    company_std_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'companyStdDate'</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    create_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'createDate'</span><span class=\"token punctuation\">)</span>\n    update_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>db_column<span class=\"token operator\">=</span><span class=\"token string\">'updateDate'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        managed <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'item'</span>\n        unique_together <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'std_date'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'company_no'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위의 데이터 구조는 <code class=\"language-text\">inspectdb</code>를 통해서 자동으로 작성된 <code class=\"language-text\">models.py</code>입니다.<br>\n<code class=\"language-text\">Header</code>테이블은 새로운 회사가 유입되지 않는 이상 변화가 없습니다.<br>\n<code class=\"language-text\">Item</code>테이블은 매일 새로운 데이터로 업데이트 됩니다.</p>\n<h4>1편에서는 sql에 대한 설명은 아닙니다.</h4>\n<p>저는 django의 orm을 통해서 데이터를 가져오는 것에 익숙했습니다.\n그런 상태로 sql을 접하니 알 것 같으면서 모르겠다고 느껴졌습니다.\n그 이유는 django의 <code class=\"language-text\">직관적인 orm</code> 때문이라고 생각됩니다.\norm을 사용하면서 어디서 어떤 조건으로 데이터를 가져와야 하는지 흐름을 이해했습니다. 예를 들면 <code class=\"language-text\">filter</code>와 같은 것이 있습니다.<br><br>\n하지만 sql은 where 조건을 사용하게 되는데 간단하게는 <code class=\"language-text\">true</code>나 <code class=\"language-text\">false</code>로, 더 나아가서는 서브쿼리로 조건을 사용하게 됩니다.\n서브쿼리가 보여지는 방식은 orm보다는 다소 불편합니다. 그래서 더 어렵게 보여졌다봅니다.<br><br>\n제가 이해하는 방식은 오로지 제 기준입니다. 나름 정리해 본 순서를 적어보겠습니다.</p>\n<h3>1. 추출하고자 하는 데이터를 설정한다.</h3>\n<p>이어질 포스트들을 한 가지 목표를 가지고 진행이 될 예정입니다.<br>\n제가 가져올 데이터들은 다음과 같습니다.</p>\n<ol>\n<li>순위</li>\n<li>순위 변동(기준일자와 기준일자의 하루 전데이터의 비교)</li>\n<li>회사 이름</li>\n<li>누적 대출액</li>\n<li>기타 데이터</li>\n</ol>\n<h3>2. 조건이 있다면 조건을 정리하고, 계산을 해야하는 데이터를 구분한다.</h3>\n<p>두 번째로 할 일은 정리하는 시간을 갖는 겁니다.<br></p>\n<ul>\n<li>\n<p>조건을 먼저 정리해보겠습니다.</p>\n<ol>\n<li>is_use = True</li>\n<li><code class=\"language-text\">누적 대출액</code>을 기준으로 내림차순 정렬을 진행합니다.</li>\n<li>is_association의 값이 <code class=\"language-text\">True</code> or <code class=\"language-text\">False</code> 혹은 <code class=\"language-text\">True와 False 모두</code> 이렇게 첫번째 필터 조건이 있습니다.</li>\n<li>기준 일자를 설정합니다.</li>\n<li>기타 컬럼들로 정렬이 가능해야합니다.\n<br><br></li>\n</ol>\n</li>\n<li>\n<p>다음으로는 계산을 해야하는 데이터를 구분합니다. 구분 할 때에는 두 가지로 분류합니다.</p>\n<ol>\n<li>\n<p>새로운 컬럼을 만들어야하는 데이터</p>\n<ul>\n<li>위의 예시에서 1번에 해당하는 것은 <code class=\"language-text\">순위</code>입니다.</li>\n</ul>\n</li>\n<li>\n<p>두개 이상의 테이블에서 계산이 이루어져서 만들어지는 데이터</p>\n<ul>\n<li>2번에 해당하는 것은 <code class=\"language-text\">순위 변동</code>입니다. 순위 변동은 오늘의 데이터 테이블과 어제의 데이터 테이블에서 순위를 각각 가져와 계산을 해야합니다.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3>3. 데이터 추출을 위해 테이블 간에 관계가 필요하다면 어떤 관계로 이루어 져야 할지 정리한다.</h3>\n<p>세 번째는 테이블 간의 관계를 정하는 일입니다.<br>\n관계를 정리하고 큰 그림의 sql문을 작성합니다.</p>\n<p>orm을 사용하면서 데이터를 가져오는 흐름에 익숙하신 분들은 조금만 생각해보시면\n금방 sql을 사용할 수 있으실거라 생각합니다.\n<a href=\"https://bmh8993.github.io/DATABASE&#x26;SQL/sql-%ED%81%B0-%EA%B7%B8%EB%A6%BC%EC%9D%84-%EA%B7%B8%EB%A0%A4%EB%B3%B4%EC%9E%90/\">다음 포스트</a> 로 이어집니다</p>","fields":{"tagSlugs":["/tags/sql/"],"slug":"/cs/db-sql/sql-01/"},"frontmatter":{"title":"SQL#01//sql 짜기 전에 흐름을 파악하자","tags":["sql"],"date":"2020-02-10T00:02:19.000Z","description":"SQL을 짜는 전략에 대해서 알아봅시다.","path":"/cs/db-sql/sql-01/","category":"DB&SQL"},"tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/cs/db-sql/sql-01/#1%ED%8E%B8%EC%97%90%EC%84%9C%EB%8A%94-sql%EC%97%90-%EB%8C%80%ED%95%9C-%EC%84%A4%EB%AA%85%EC%9D%80-%EC%95%84%EB%8B%99%EB%8B%88%EB%8B%A4\">1편에서는 sql에 대한 설명은 아닙니다.</a></li>\n</ul>\n</li>\n<li><a href=\"/cs/db-sql/sql-01/#1-%EC%B6%94%EC%B6%9C%ED%95%98%EA%B3%A0%EC%9E%90-%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%84%A4%EC%A0%95%ED%95%9C%EB%8B%A4\">1. 추출하고자 하는 데이터를 설정한다.</a></li>\n<li><a href=\"/cs/db-sql/sql-01/#2-%EC%A1%B0%EA%B1%B4%EC%9D%B4-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EC%A1%B0%EA%B1%B4%EC%9D%84-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B3%A0-%EA%B3%84%EC%82%B0%EC%9D%84-%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%95%9C%EB%8B%A4\">2. 조건이 있다면 조건을 정리하고, 계산을 해야하는 데이터를 구분한다.</a></li>\n<li><a href=\"/cs/db-sql/sql-01/#3-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B6%94%EC%B6%9C%EC%9D%84-%EC%9C%84%ED%95%B4-%ED%85%8C%EC%9D%B4%EB%B8%94-%EA%B0%84%EC%97%90-%EA%B4%80%EA%B3%84%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%98%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%A4-%EA%B4%80%EA%B3%84%EB%A1%9C-%EC%9D%B4%EB%A3%A8%EC%96%B4-%EC%A0%B8%EC%95%BC-%ED%95%A0%EC%A7%80-%EC%A0%95%EB%A6%AC%ED%95%9C%EB%8B%A4\">3. 데이터 추출을 위해 테이블 간에 관계가 필요하다면 어떤 관계로 이루어 져야 할지 정리한다.</a></li>\n</ul>","headings":[{"value":"1편에서는 sql에 대한 설명은 아닙니다.","depth":4},{"value":"1. 추출하고자 하는 데이터를 설정한다.","depth":3},{"value":"2. 조건이 있다면 조건을 정리하고, 계산을 해야하는 데이터를 구분한다.","depth":3},{"value":"3. 데이터 추출을 위해 테이블 간에 관계가 필요하다면 어떤 관계로 이루어 져야 할지 정리한다.","depth":3}]}},"pageContext":{"slug":"/cs/db-sql/sql-01/"}},"staticQueryHashes":[]}