{"componentChunkName":"component---src-templates-tag-template-jsx","path":"/tags/design-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","menu":[{"label":"All","path":"/","sub_menu":null},{"label":"About me","path":"/about/","sub_menu":null},{"label":"CS","path":"/cs/","sub_menu":[{"label":"data structure","path":"/data-structure/"}]},{"label":"ETC","path":"/etc/","sub_menu":[{"label":"blog","path":"/blog/"},{"label":"css","path":"/css/"},{"label":"design pattern","path":"/design-pattern/"},{"label":"java","path":"/java/"},{"label":"js","path":"/js/"}]},{"label":"Tags","path":"/tags","sub_menu":null}],"author":{"name":"인간지능","email":"bmh9175@gmail.com","telegram":"#","twitter":"#","github":"/bmh8993","rss":"#","vk":"#"}}},"allMarkdownRemark":{"edges":[{"node":{"fileAbsolutePath":"/Users/baemh/Desktop/bmh8993.github.io/src/pages/---articles/---etc/designe-pattern/2020-01-03---Flyweight/index.md","fields":{"slug":"/design-pattern/flyweight/","categorySlug":"/categories/design-pattern/"},"frontmatter":{"title":"Flyweight 패턴","date":"2020-01-03T05:06:35.750Z","category":"design-pattern","description":"플라이웨이트 패턴은 비용이 큰 자원을 공통으로 사용할 수 있도록 만드는 패턴이다. 1990년에 Paul Calder와 Mark Linton이 WYSIWYG 문서 편집기의 글자모양 정보를 효율적으로 다루기 위해 처음 도입되고 널리 연구되어 졌다."}}},{"node":{"fileAbsolutePath":"/Users/baemh/Desktop/bmh8993.github.io/src/pages/---articles/---etc/designe-pattern/2020-01-02---Singleton/index.md","fields":{"slug":"/design-pattern/singleton/","categorySlug":"/categories/design-pattern/"},"frontmatter":{"title":"Singleton 패턴","date":"2020-01-02T05:06:35.750Z","category":"design-pattern","description":"객체가 너무 많아지면 컴퓨터 자원을 과도하게 사용하게 되고, 이는 프로그램 전체의 속도를 느리게 할 수 있다. → 개발자는 객체의 최대 개수를 제한할 필요가 생긴다."}}},{"node":{"fileAbsolutePath":"/Users/baemh/Desktop/bmh8993.github.io/src/pages/---articles/---etc/designe-pattern/2020-01-01---DI/index.md","fields":{"slug":"/design-pattern/di/","categorySlug":"/categories/design-pattern/"},"frontmatter":{"title":"DI (Dependency Injection)","date":"2020-01-01T05:06:35.750Z","category":"design-pattern","description":"객체 읜존성과 객체지향에서의 결합 관계에 대해 간략하게 정리한 내용"}}}]}},"pageContext":{"tag":"design pattern"}},"staticQueryHashes":[]}