{"componentChunkName":"component---src-templates-post-template-jsx","path":"/python/django/difference-fbv-cbv/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"302edb64-adde-5eab-b04d-bb1148b69cce","html":"<p>FBV = <strong>Function Based View</strong><br>\nCBV = <strong>Class Based View</strong><br>\n<br></p>\n<ul>\n<li>클라이언트는url 주소를 통해서 서버에 request를 보내고, Django는 urls.py를 참고하여 해당 url에\n매핑된 뷰를 찾아 실행한다. 이때 실행되는 뷰의 종류에는 함수 기반 뷰(FBV)와 클래스 기반 뷰(CBV)가\n있다.</li>\n<li>FBV와 CBV가 실행하는 것은 결국 함수이다. 자세한 내용은 아래에서 설명하겠다.</li>\n</ul>\n<br>\nDjango가 동작하는 원리는 다음 게시물을 참고하길 바란다.<br>\n<p>▶︎ <a href=\"https://bmh8993.github.io/Django/what-is-django-and-how-to-it-works/\">Django는 무엇이고 어떻게 일하는가</a></p>\n<h2>함수 기반 뷰(Function Based View)</h2>\n<ul>\n<li>django source code를 보면 FBV에서는 app.urls.py에서 <code class=\"language-text\">함수</code>를 호출하고 그 함수는\nrequest 객체를 받아서 각 메쏘드에 따라 처리한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app/views.py</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HttpResponse<span class=\"token punctuation\">,</span> JsonResponse\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">function_based_view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">:</span>\n        content <span class=\"token operator\">=</span> <span class=\"token string\">\"...\"</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">:</span> content<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app/urls.py</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> function_view_name\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">\"view/url/\"</span><span class=\"token punctuation\">,</span> function_view_name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h3>장점</h3>\n<ul>\n<li>함수로 정의하기에 읽기가 쉽고 클래스 기반 뷰보다 직관적이다</li>\n<li>작성하기가 쉽다</li>\n</ul>\n<h3>단점</h3>\n<ul>\n<li>확장과 재사용성이 클래스 기반 뷰에 비해서 강력하지 못하다</li>\n</ul>\n<h2>클래스 기반 뷰(Class Based View)</h2>\n<ul>\n<li>django soruce code를 보면 CBV에서는 app.urls.py에서 클래스 메소드인\n<code class=\"language-text\">defined_view_class.as_view()</code>를 실행한다. <code class=\"language-text\">as_view</code>는 <code class=\"language-text\">view</code>함수를, <code class=\"language-text\">view</code>는 <code class=\"language-text\">dispatch</code>함수를\n호출하고, <code class=\"language-text\">dispatch</code>함수는 request.method를 확인하여 method별로 정의된 함수에 따라\nrequest를 처리한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app/views.py</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse<span class=\"token punctuation\">,</span> HttpResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> View\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassBasedView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        content <span class=\"token operator\">=</span> <span class=\"token string\">\"...\"</span>\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">:</span> content<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span><span class=\"token string\">\"SUCCESS\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app/urls.py</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> ClassViewName\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">\"view/url/\"</span><span class=\"token punctuation\">,</span> ClassViewName<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h3>장점</h3>\n<ul>\n<li>코드를 확장하거나 재사용하기 쉽다.</li>\n<li>mixin(다중 상속) 같은 객체지향 기술을 사용할 수 있다.</li>\n<li>내장 제네릭 클래스 기반 뷰</li>\n</ul>\n<h3>단점</h3>\n<ul>\n<li>읽기가 어렵다.</li>\n<li>직관적이지 않다.</li>\n</ul>","fields":{"tagSlugs":["/tags/django/"],"slug":"/python/django/difference-fbv-cbv/"},"frontmatter":{"title":"Django / FBV와 CBV의 차이","tags":["django"],"date":"2020-04-08T19:05:05.000Z","description":"Django에서 FBV와 CBV의 차이에 대해서 알아봅시다.","path":"/python/django/difference-fbv-cbv/","category":"Django"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/python/django/difference-fbv-cbv/#%ED%95%A8%EC%88%98-%EA%B8%B0%EB%B0%98-%EB%B7%B0function-based-view\">함수 기반 뷰(Function Based View)</a></p>\n<ul>\n<li><a href=\"/python/django/difference-fbv-cbv/#%EC%9E%A5%EC%A0%90\">장점</a></li>\n<li><a href=\"/python/django/difference-fbv-cbv/#%EB%8B%A8%EC%A0%90\">단점</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/python/django/difference-fbv-cbv/#%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0class-based-view\">클래스 기반 뷰(Class Based View)</a></p>\n<ul>\n<li><a href=\"/python/django/difference-fbv-cbv/#%EC%9E%A5%EC%A0%90-1\">장점</a></li>\n<li><a href=\"/python/django/difference-fbv-cbv/#%EB%8B%A8%EC%A0%90-1\">단점</a></li>\n</ul>\n</li>\n</ul>","headings":[{"value":"함수 기반 뷰(Function Based View)","depth":2},{"value":"장점","depth":3},{"value":"단점","depth":3},{"value":"클래스 기반 뷰(Class Based View)","depth":2},{"value":"장점","depth":3},{"value":"단점","depth":3}]}},"pageContext":{"slug":"/python/django/difference-fbv-cbv/"}},"staticQueryHashes":[]}