{"componentChunkName":"component---src-templates-post-template-jsx","path":"/python/django/difference-between-null-true-and-blank-true","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"b4f4f5dc-c6d1-5b02-8e86-dc94fb8b61eb","html":"<p>django의 field option인 null=True와 blank=True에 대해서 알아봅시다.<br>\nDjango model을 검색하면 상위에 올라오는 검색어입니다.<br>\n뭔가 빈 값을 허락하냐는 옵션인데 둘 다 비슷해보입니다.\n분명 다른 것이 있으니 둘 다 제공할텐데 무엇이 다른지 차이를 알고 사용해봅시다.<br></p>\n<ul>\n<li>Null\nDB와 관련되어 있습니다. 주어진 DB 컬럼이 null 값을 가질 것인지 아닌지를 정의합니다.\nDB에 저장시 컬럼의 값이 NULL(데이터 없음)이 저장됩니다.</li>\n<li>Blank\n유효성과 관련되어 있습니다. <code class=\"language-text\">form.is_valid()</code>가 호출될 때 폼 유효성 검사에 사용됩니다.\n쉽게 이야기하면, 필드가 폼(입력양식)에서 빈 채로 저장되는 것을 허용하느냐에 대한 물음으로, 허용시 \"\"(빈 스트링)이 저장됩니다.</li>\n</ul>\n<p>여러 글에 따르면 개발자들이 많이 실수하는 부분은 <code class=\"language-text\">CharField</code>, <code class=\"language-text\">TextField</code>와 같은 문자열 기반 필드에 <code class=\"language-text\">null=True</code>를 정의하는 것입니다.\n이 같은 실수를 피해야합니다. 그렇지 않으면 “데이터 없음”에 대해 두 가지 값, <code class=\"language-text\">None</code>과 <code class=\"language-text\">빈 문자열</code>을 갖게 됩니다.\n“데이터 없음”에 대해 두 가지 값을 갖는 것은 중복입니다.<br>\n<br>\n즉, 문자열 기반의 모델 필드를 <code class=\"language-text\">nullable</code>하게 만들고 싶다면 다음과 같이 해야합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n    introduce <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 여기서 null=True는 넣으면 안된다.</span>\n    birth_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 둘 다 넣어도 괜찮다.</span></code></pre></div>","fields":{"tagSlugs":["/tags/django/"],"slug":"/python/django/difference-between-null-true-and-blank-true"},"frontmatter":{"title":"Django/null=True와 blank=True의 차이","tags":["django"],"date":"2019-12-16T11:02:18.000Z","description":"django의 field option인 null=True와 blank=True에 대해서 알아봅시다.","path":"/python/django/difference-between-null-true-and-blank-true","category":"Django"},"tableOfContents":"","headings":[]}},"pageContext":{"slug":"/python/django/difference-between-null-true-and-blank-true"}},"staticQueryHashes":[]}