{"componentChunkName":"component---src-templates-post-template-jsx","path":"/python/django/drf-07-permission/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"c021c59d-f13f-5113-bb1d-d89ad1d08467","html":"<h1>Permission</h1>\n<ul>\n<li>request에 access를 허용할 지 또는 거부할 지 결정</li>\n<li>Permission 검사는 다른 코드가 진행되기 전에 view의 맨 처음에 항상 실행됨</li>\n<li>Permission 검사는 일반적으로 들어오는 request의 허용하는지 결정하기 위해 <code class=\"language-text\">request.user</code> 및\n<code class=\"language-text\">request.auth</code>의 properies를 등록정보의 인증정보로 사용</li>\n<li>\n<p>가장 간단한 permission은 <code class=\"language-text\">IsAuthenticated</code> class인데</p>\n<ul>\n<li>인증된 사용자에게 access 허용</li>\n<li>인증되지 않은 사용자에게 access 거부</li>\n</ul>\n</li>\n</ul>\n<h2>모든 View에 동일한 Permission 적용하기(전역 설정)</h2>\n<ul>\n<li>settings.py에 아래 코드를 입력합니다.</li>\n<li>하지만 아래와 같이 사용은 합리적이지 않습니다. 일반적으로 view마다 권한이 다르기 때문입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">REST_FRAMEWORK <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'DEFAULT_PERMISSION_CLASSES'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">'rest_framework.permissions.IsAuthenticatedOrReadOnly'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>특정 View에 특정 Permission 지정하기</h2>\n<ul>\n<li>app/view.py에 다음과 같이 입력합니다.</li>\n<li>APIView를 사용한 view를 작성했다면 다음과 같이 작성합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleAPIView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    permission_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>PermissionClass<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Permission을 커스텀해서 사용하기(Custom permissions)</h2>\n<ul>\n<li>다음과 같은 model과 serializers가 있다고 가정합니다.</li>\n<li>view와 urls를 작성한 이후 permissions.py를 작성하고 permissions을 적용하고 싶은 view에\n코드를 추가적으로 작성합니다.</li>\n<li>지금 작성하려는 permissions는 리뷰를 작성한 사람이면 접근을 허락하고 아니면 읽기만 가능한\npermissions입니다.(일차적으로 읽기에 해당하는 메소드이라면 접근 허락)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ebook/models.py</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>validators <span class=\"token keyword\">import</span> MinValueValidator<span class=\"token punctuation\">,</span> MaxValueValidator\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Ebook</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    title <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">140</span><span class=\"token punctuation\">)</span>\n    author <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n    description <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    description_date <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>title\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Review</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    created_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    updated_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    review_author <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    review <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextField<span class=\"token punctuation\">(</span>blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    rating <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>PositiveIntegerField<span class=\"token punctuation\">(</span>\n            validators<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n                MinValueValidator<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                MaxValueValidator<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">]</span>\n            <span class=\"token punctuation\">)</span>\n    ebook <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            Ebook<span class=\"token punctuation\">,</span>\n            on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            related_name<span class=\"token operator\">=</span><span class=\"token string\">\"reviews\"</span>\n            <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>rating<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ebook/api/serializers.py</span>\n\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Ebook<span class=\"token punctuation\">,</span> Review\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReviewSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    review_author <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>StringRelatedField<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Review\n        exclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"ebook\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">EbookSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    reviews <span class=\"token operator\">=</span> ReviewSerializer<span class=\"token punctuation\">(</span>many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Ebook\n        fields <span class=\"token operator\">=</span> <span class=\"token string\">\"__all__\"</span></code></pre></div>\n<h4>Custom permissions</h4>\n<ul>\n<li>custom permissions를 구현하려면, <code class=\"language-text\">BasePermission</code>를 상속받아서 작성합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ebook/api/permissions.py</span>\n\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> permissions\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">IsReviewAuthorOrReadOnly</span><span class=\"token punctuation\">(</span>permissions<span class=\"token punctuation\">.</span>BasePermission<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">has_object_permissions</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method <span class=\"token keyword\">in</span> permissions<span class=\"token punctuation\">.</span>SAFE_METHOD<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>review_author <span class=\"token operator\">==</span> request<span class=\"token punctuation\">.</span>user</code></pre></div>\n<ul>\n<li>View Class에 <code class=\"language-text\">permissions_classes = IsReviewAuthorOrReadOnly</code>를 선언합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># ebook/api/views.py</span>\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> generics\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> mixins\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> permissions\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>generics <span class=\"token keyword\">import</span> get_object_or_404\n<span class=\"token keyword\">from</span> rest_framework<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ValidationError\n\n<span class=\"token keyword\">from</span> ebook<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Ebook<span class=\"token punctuation\">,</span> Review\n<span class=\"token keyword\">from</span> ebook<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>serializers <span class=\"token keyword\">import</span> EbookSerializer<span class=\"token punctuation\">,</span> ReviewSerializer\n<span class=\"token keyword\">from</span> ebook<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>permissions <span class=\"token keyword\">import</span> IsReviewAuthorOrReadOnly\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ReviewDetailAPIVIEW</span><span class=\"token punctuation\">(</span>generics<span class=\"token punctuation\">.</span>RetrieveUpdateDestroyAPIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    queryset <span class=\"token operator\">=</span> Review<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    serializer_class <span class=\"token operator\">=</span> ReviewSerializer\n    permissions_classes <span class=\"token operator\">=</span> IsReviewAuthorOrReadOnly</code></pre></div>\n<h4>APIView에 사용하기(custom view에 사용하기)</h4>\n<ul>\n<li>위와 같이 generic view를 사용하면 object level permissions을 검사하지만 custom view를\n작성하는 경우 object level permissions 검사를 직접해야합니다. 즉 <code class=\"language-text\">has_object_permission</code>은\n별도의 호출과정이 필요한데, <code class=\"language-text\">get_object</code>를 오버라이드 하고 함수 내에서 <code class=\"language-text\">check_object_permissions</code>\n을 통해 <code class=\"language-text\">has_object_permission</code>을 호출할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReviewDetailView</span><span class=\"token punctuation\">(</span>APIView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    permissions_classes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>IsReviewAuthorOrReadOnly<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_object</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> review_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            review <span class=\"token operator\">=</span> Review<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token operator\">=</span>review_id<span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>check_object_permissions<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">,</span> review<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> review\n        <span class=\"token keyword\">except</span> Review<span class=\"token punctuation\">.</span>DoewNotExist<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> review_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        review <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_object<span class=\"token punctuation\">(</span>review_id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<hr>\n<p>ref: <a href=\"https://dean-kim.github.io/rest_framework/2017/05/22/Django-REST-Framework-Permissions.html\">Dean’s blog</a><br>\nref: <a href=\"https://ssungkang.tistory.com/entry/Django-APIView%EC%97%90-permission-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\">ssung.k</a></p>","fields":{"tagSlugs":["/tags/drf/"],"slug":"/python/django/drf-07-permission/"},"frontmatter":{"title":"DRF/#07 Permission으로 request의 access 다루기","tags":["DRF"],"date":"2020-05-05T23:06:14.000Z","description":"DRF의 permission에 대해서 알아봅시다.","path":"/python/django/drf-07-permission/","category":"Django"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/python/django/drf-07-permission/#permission\">Permission</a></p>\n<ul>\n<li><a href=\"/python/django/drf-07-permission/#%EB%AA%A8%EB%93%A0-view%EC%97%90-%EB%8F%99%EC%9D%BC%ED%95%9C-permission-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0%EC%A0%84%EC%97%AD-%EC%84%A4%EC%A0%95\">모든 View에 동일한 Permission 적용하기(전역 설정)</a></li>\n<li><a href=\"/python/django/drf-07-permission/#%ED%8A%B9%EC%A0%95-view%EC%97%90-%ED%8A%B9%EC%A0%95-permission-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\">특정 View에 특정 Permission 지정하기</a></li>\n<li>\n<p><a href=\"/python/django/drf-07-permission/#permission%EC%9D%84-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0custom-permissions\">Permission을 커스텀해서 사용하기(Custom permissions)</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/python/django/drf-07-permission/#custom-permissions\">Custom permissions</a></li>\n<li><a href=\"/python/django/drf-07-permission/#apiview%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0custom-view%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">APIView에 사용하기(custom view에 사용하기)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","headings":[{"value":"Permission","depth":1},{"value":"모든 View에 동일한 Permission 적용하기(전역 설정)","depth":2},{"value":"특정 View에 특정 Permission 지정하기","depth":2},{"value":"Permission을 커스텀해서 사용하기(Custom permissions)","depth":2},{"value":"Custom permissions","depth":4},{"value":"APIView에 사용하기(custom view에 사용하기)","depth":4}]}},"pageContext":{"slug":"/python/django/drf-07-permission/"}},"staticQueryHashes":[]}