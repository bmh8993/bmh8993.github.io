{"componentChunkName":"component---src-templates-post-template-jsx","path":"/python/django/view-work-flow/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"e520b16d-29a3-597c-8d60-9aa95b9b9a4a","html":"<p>DRF를 더욱 잘 오버라이드 하기 위해서 Django의 flow를 다시 파악하려한다.</p>\n<p>전체 적인 흐름은 <a href=\"https://bmh8993.github.io/Django/what-is-django-and-how-to-it-works/\">다음 포스트</a>를 확인하길 바란다.</p>\n<h1>Django에서의 View</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app/urls.py</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>urls <span class=\"token keyword\">import</span> path\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>views <span class=\"token keyword\">import</span> ClassViewName\n\nurlpatterns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    path<span class=\"token punctuation\">(</span><span class=\"token string\">\"view/url/\"</span><span class=\"token punctuation\">,</span> ClassViewName<span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">ClassViewName.as_view()</code>에서 as_view()의 소스 코드를 보면</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Intentionally simple parent class for all views. Only implements\n    dispatch-by-method and simple sanity checking.\n    \"\"\"</span>\n\n    http_method_names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'put'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'patch'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'delete'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'head'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'options'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'trace'</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># code</span>\n\n    <span class=\"token decorator annotation punctuation\">@classonlymethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">as_view</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>initkwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># code</span>\n\n        <span class=\"token keyword\">def</span> <span class=\"token function\">view</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self <span class=\"token operator\">=</span> cls<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>initkwargs<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">'head'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get\n            self<span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token string\">'request'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> AttributeError<span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"%s instance has no 'request' attribute. Did you override \"</span>\n                    <span class=\"token string\">\"setup() and forget to call super()?\"</span> <span class=\"token operator\">%</span> cls<span class=\"token punctuation\">.</span>__name__\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        view<span class=\"token punctuation\">.</span>view_class <span class=\"token operator\">=</span> cls\n        view<span class=\"token punctuation\">.</span>view_initkwargs <span class=\"token operator\">=</span> initkwargs\n\n        <span class=\"token comment\"># take name and docstring from class</span>\n        update_wrapper<span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">,</span> updated<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># and possible attributes set by decorators</span>\n        <span class=\"token comment\"># like csrf_exempt from dispatch</span>\n        update_wrapper<span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">,</span> cls<span class=\"token punctuation\">.</span>dispatch<span class=\"token punctuation\">,</span> assigned<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> view\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"Initialize attributes shared by all view methods.\"\"\"</span>\n        self<span class=\"token punctuation\">.</span>request <span class=\"token operator\">=</span> request\n        self<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args\n        self<span class=\"token punctuation\">.</span>kwargs <span class=\"token operator\">=</span> kwargs\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Try to dispatch to the right method; if a method doesn't exist,</span>\n        <span class=\"token comment\"># defer to the error handler. Also defer to the error handler if the</span>\n        <span class=\"token comment\"># request method isn't on the approved list.</span>\n        <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>http_method_names<span class=\"token punctuation\">:</span>\n            handler <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>http_method_not_allowed<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            handler <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>http_method_not_allowed\n        <span class=\"token keyword\">return</span> handler<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li>as_view는 view를 리턴하게 된다.  view의 type을 찍어보면 &#x3C;class ‘function’>라고 나온다.</li>\n<li>view를 실행하면 View의 메소드 <code class=\"language-text\">setup</code>에서 ViewClass의 클래스 변수에 request, args, kwargs를 추가한다.</li>\n<li>이후 dispatch 메소드를 실행하게 되는데 <code class=\"language-text\">dispatch</code>는 request의 method를 체크해서 해당 메소드를 호출하게 된다.</li>\n</ul>\n<h1>DRF에서의 APIView</h1>\n<p>APIView는 DRF에서 제공하는 ViewClass의 기초가 된다. APIView를 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">APIView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    @<span class=\"token builtin\">classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">as_view</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>initkwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        view <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>as_view<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>initkwargs<span class=\"token punctuation\">)</span>\n        view<span class=\"token punctuation\">.</span>cls <span class=\"token operator\">=</span> cls\n        view<span class=\"token punctuation\">.</span>initkwargs <span class=\"token operator\">=</span> initkwargs\n\n        <span class=\"token keyword\">return</span> csrf_exempt<span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        `.dispatch()` is pretty much the same as Django's regular dispatch,\n        but with extra hooks for startup, finalize, and exception handling.\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>args <span class=\"token operator\">=</span> args\n        self<span class=\"token punctuation\">.</span>kwargs <span class=\"token operator\">=</span> kwargs\n        request <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>initialize_request<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>request <span class=\"token operator\">=</span> request\n        self<span class=\"token punctuation\">.</span>headers <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>default_response_headers  <span class=\"token comment\"># deprecate?</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>initial<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\"># Get the appropriate handler method</span>\n            <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>http_method_names<span class=\"token punctuation\">:</span>\n                handler <span class=\"token operator\">=</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                  self<span class=\"token punctuation\">.</span>http_method_not_allowed<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                handler <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>http_method_not_allowed\n\n            response <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> exc<span class=\"token punctuation\">:</span>\n            response <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>handle_exception<span class=\"token punctuation\">(</span>exc<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>response <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>finalize_response<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>response</code></pre></div>\n<ul>\n<li>APIView에서 return되는 view는 무보클래스의 as_view를 통해서 반환된다.</li>\n<li>부모 클래스인 view에서 <code class=\"language-text\">self.dispatch</code>를 return 하게되는데 여기서 dispatch는 APIView의\ndispatch이다. 왜냐하면 self는 APIView이기때문이다.</li>\n<li>여기서 dispatch가 확인하는 중요한 사항은 <code class=\"language-text\">self.initial</code>이다.</li>\n</ul>\n<h2>initial</h2>\n<p>self.initial은 어떤 값을 return하지 않는다. 함수의 이름대로 initial, 시작부분이고 여기서 3가지를 확인하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">initial</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Runs anything that needs to occur prior to calling the method handler.\n    \"\"\"</span>\n    self<span class=\"token punctuation\">.</span>format_kwarg <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_format_suffix<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Perform content negotiation and store the accepted info on the request</span>\n    neg <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>perform_content_negotiation<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span>accepted_renderer<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>accepted_media_type <span class=\"token operator\">=</span> neg\n\n    <span class=\"token comment\"># Determine the API version, if versioning is in use.</span>\n    version<span class=\"token punctuation\">,</span> scheme <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>determine_version<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n    request<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span>versioning_scheme <span class=\"token operator\">=</span> version<span class=\"token punctuation\">,</span> scheme\n\n    <span class=\"token comment\"># Ensure that the incoming request is permitted</span>\n    self<span class=\"token punctuation\">.</span>perform_authentication<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>check_permissions<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>check_throttles<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>perform_authentication</li>\n<li>check_permissions</li>\n<li>check_throttles</li>\n</ol>\n<h3>1. perform_authentication</h3>\n<p>이 함수를 실행하면 request.user를 하는데 <code class=\"language-text\">.user</code>는 getter이다. <code class=\"language-text\">_user</code>의 유무에 따라 <code class=\"language-text\">_authenticated</code>를 실행하거나 <code class=\"language-text\">_user</code>를 return한다.<br>\n<code class=\"language-text\">_authenticated</code>는 인증 클래스들을 가져와서</p>\n<h3>2. check_permissions</h3>\n<h3>3. check_throttles</h3>","fields":{"tagSlugs":["/tags/django/"],"slug":"/python/django/view-work-flow/"},"frontmatter":{"title":"Django / CBV에서 View, APIView는 어떻게 동작하는가?","tags":["django"],"date":"2020-06-17T02:02:15.000Z","description":"Django에서 CBV가 동작하는 방식에 대해서 알아봅시다","path":"/python/django/view-work-flow/","category":"Django"},"tableOfContents":"<ul>\n<li><a href=\"/python/django/view-work-flow/#django%EC%97%90%EC%84%9C%EC%9D%98-view\">Django에서의 View</a></li>\n<li>\n<p><a href=\"/python/django/view-work-flow/#drf%EC%97%90%EC%84%9C%EC%9D%98-apiview\">DRF에서의 APIView</a></p>\n<ul>\n<li>\n<p><a href=\"/python/django/view-work-flow/#initial\">initial</a></p>\n<ul>\n<li><a href=\"/python/django/view-work-flow/#1-perform_authentication\">1. perform_authentication</a></li>\n<li><a href=\"/python/django/view-work-flow/#2-check_permissions\">2. check_permissions</a></li>\n<li><a href=\"/python/django/view-work-flow/#3-check_throttles\">3. check_throttles</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","headings":[{"value":"Django에서의 View","depth":1},{"value":"DRF에서의 APIView","depth":1},{"value":"initial","depth":2},{"value":"1. perform_authentication","depth":3},{"value":"2. check_permissions","depth":3},{"value":"3. check_throttles","depth":3}]}},"pageContext":{"slug":"/python/django/view-work-flow/"}},"staticQueryHashes":[]}