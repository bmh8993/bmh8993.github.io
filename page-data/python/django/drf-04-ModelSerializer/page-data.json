{"componentChunkName":"component---src-templates-post-template-jsx","path":"/python/django/drf-04-ModelSerializer/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"b0cca299-bc04-569a-ad87-296127726197","html":"<h2>ModelSerializer와 serializer의 field를 구성하는 방법</h2>\n<h3>ModelSerializer</h3>\n<p>소스코드를 보면 ModelSerializer를 다음과 같이 설명하고 있습니다.</p>\n<blockquote>\n<ul>\n<li>\n<p>ModelSerializer는 다음과 같은 경우를 제외하고 일반 Serializer에 불과합니다.</p>\n<ul>\n<li>기본 필드 집합들을 기본적으로 제공합니다.(모델을 기초로 serializer class를 자동으로 만들어줍니다.)</li>\n<li>기본 검증 집합들을 기본적으로 제공합니다.</li>\n<li><code class=\"language-text\">.create()</code>, <code class=\"language-text\">.update()</code>가 제공됩니다. (하지만 writable nested relationships는 지원하지 않으므로 필요에 따라 create 메소드를 만들어야합니다.)</li>\n</ul>\n</li>\n<li>모델의 필드에 기반하여 작성된 serializer의 필드 집합을 자동으로 결정하는 방식은 상당히 복잡합니다.\n하지만 구현하는 것을 파고들 필요는 없습니다.</li>\n<li>‘ModelSerializer’ 클래스가 필요한 필드 집합을 생성하지 않는 경우, 시리얼라이저 클래스에\n필드를 명시적으로 선언하거나 ‘시리얼라이저’ 클래스를 사용하십시오.</li>\n</ul>\n</blockquote>\n<h4>ModelSerializer 사용방법</h4>\n<p>이전에 serializer를 소개하는 포스팅에서 <code class=\"language-text\">ArticleSerializer</code> class를 다음과 같이 구성했었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># news.serializers.py</span>\n\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>Serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>IntegerField<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    author <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    title <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    description <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    body <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    location <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    publication_date <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    active <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    created_at <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    updated_at <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>read_only<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>ModelSerializer를 사용하면 더 간편하게 가능합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># news.serializers.py</span>\n\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Article\n        fields <span class=\"token operator\">=</span> <span class=\"token string\">\"__all__\"</span></code></pre></div>\n<ul>\n<li>모델의 모든 필드를 사용하고 싶을 때 <code class=\"language-text\">fields = &quot;__all__&quot;</code></li>\n<li>모델의 일부 필드를 제외하고 싶을 때 <code class=\"language-text\">exclude = &quot;(field_name_1, field_name_2)&quot;</code></li>\n<li>모델의 일부 필드만 선택적으로 사용할 때 <code class=\"language-text\">fields = (&quot;field_name_1&quot;, &quot;field_name_2&quot;)</code></li>\n</ul>\n<h3>field 커스텀하기</h3>\n<p>기본적으로 model에 등록된 필드 값들은 Meta 클래스에 추가해줌으로서 다뤄줄 수 있지만 커스텀필드를\n정의하는데 있어서는 새로운 방법이 필요합니.</p>\n<h4>SerializerMethodField</h4>\n<p>SerializerMethodField는 <code class=\"language-text\">read-only field</code>로 serialized된 데이터에 추가해서 사용할 수 있습니다.</p>\n<h4>SerializerMethodField 사용법</h4>\n<p>아래의 코드와 같이 <code class=\"language-text\">field_name = serializers.SerializerMethodField()</code>와 같이 field를 선언하고\n함수 이름을 <code class=\"language-text\">get_field_name</code>의 식으로 정의합니다.<br>\n함수 이름을 <code class=\"language-text\">get_field_name</code>의 식으로 하지 않는다면 다음과 같이 <code class=\"language-text\">method_name</code>을 지정하면됩니다.\n<code class=\"language-text\">SerializerMethodField(method_name=field_name_as_I_want)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># news.serializers.py</span>\n\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>timesince <span class=\"token keyword\">import</span> timesince\n<span class=\"token keyword\">from</span> rest_framework <span class=\"token keyword\">import</span> serializers\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> Article\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ArticleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>ModelSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    time_since_publication <span class=\"token operator\">=</span> serializers<span class=\"token punctuation\">.</span>SerializerMethodField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        model <span class=\"token operator\">=</span> Article\n        fields <span class=\"token operator\">=</span> <span class=\"token string\">\"__all__\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_time_since_publication</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        publication_date <span class=\"token operator\">=</span> <span class=\"token builtin\">object</span><span class=\"token punctuation\">.</span>publication_date\n        now <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>now<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        time_delta <span class=\"token operator\">=</span> timesince<span class=\"token punctuation\">(</span>publication_date<span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> time_delta</code></pre></div>","fields":{"tagSlugs":["/tags/drf/"],"slug":"/python/django/drf-04-ModelSerializer/"},"frontmatter":{"title":"DRF/#04 ModelSerializer","tags":["DRF"],"date":"2020-04-20T23:04:38.000Z","description":"DRF의 ModelSerializer에 대해서 알아봅시다.","path":"/python/django/drf-04-ModelSerializer/","category":"Django"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/python/django/drf-04-ModelSerializer/#modelserializer%EC%99%80-serializer%EC%9D%98-field%EB%A5%BC-%EA%B5%AC%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">ModelSerializer와 serializer의 field를 구성하는 방법</a></p>\n<ul>\n<li>\n<p><a href=\"/python/django/drf-04-ModelSerializer/#modelserializer\">ModelSerializer</a></p>\n<ul>\n<li><a href=\"/python/django/drf-04-ModelSerializer/#modelserializer-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\">ModelSerializer 사용방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/python/django/drf-04-ModelSerializer/#field-%EC%BB%A4%EC%8A%A4%ED%85%80%ED%95%98%EA%B8%B0\">field 커스텀하기</a></p>\n<ul>\n<li><a href=\"/python/django/drf-04-ModelSerializer/#serializermethodfield\">SerializerMethodField</a></li>\n<li><a href=\"/python/django/drf-04-ModelSerializer/#serializermethodfield-%EC%82%AC%EC%9A%A9%EB%B2%95\">SerializerMethodField 사용법</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","headings":[{"value":"ModelSerializer와 serializer의 field를 구성하는 방법","depth":2},{"value":"ModelSerializer","depth":3},{"value":"ModelSerializer 사용방법","depth":4},{"value":"field 커스텀하기","depth":3},{"value":"SerializerMethodField","depth":4},{"value":"SerializerMethodField 사용법","depth":4}]}},"pageContext":{"slug":"/python/django/drf-04-ModelSerializer/"}},"staticQueryHashes":[]}