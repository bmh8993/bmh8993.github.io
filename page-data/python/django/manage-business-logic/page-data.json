{"componentChunkName":"component---src-templates-post-template-jsx","path":"/python/django/manage-business-logic/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"b1b31bb5-dabc-5155-8192-09b8f99cd083","html":"<p>django를 사용할 때 비지니스 로직을 어떻게 관리하는지 알아봅시다.</p>\n<p>Django를 사용하면서 고민되는 점이 생겼습니다. 비지니스 로직을 어떻게 관리하는게 좋을까 하는 부분입니다.\n(현재 진행하고 있는 프로젝트는 DRF를 사용하고 있습니다.)<br>\n<br>\n<strong>views.py</strong>는 CBV를 사용하고 있어서 최대한 간결하게 작성하고,\nserializer의 메소드를 오버라이드 하여 작성하고 있습니다. 복잡한 비지니스로직을 작성하다보니\n리팩토링의 필요성을 느꼈고, <strong>models.py</strong>에 모델메소드를 작성하고 있었습니다. 하지만 그마저도 너무 많아져서 fat model이 되버렸습니다.<br>\n<br></p>\n<p><em>“비지니스 로직을 어떻게 관리했을 때 프로젝트를 관리가 편해질까”</em><br><br></p>\n<p>이런 질문에서부터 이 글이 시작되었습니다.<br></p>\n<h2>Fat models는 너무 많은 의존성을 만들어낸다.</h2>\n<p>비지니스 로직은 어떤 하나의 큰 흐름입니다. 그래서 비지니스 로직을 작성하다보면 흐름을 시작한\nmodel 뿐만 아니라 다른 model에서의 메소드를 불러와서 호출하기도 합니다. 이런 방식은 불필요한 의존성을 만들어냅니다.<br>\n<br>\n의존성때문에 다른 모델에서의 변경이 발생하면 변경을 반영하기 위해서 흐름 안에 있는 코드를 수정해야 합니다.</p>\n<h2>Fat models는 테스트를 어렵게 한다.</h2>\n<p>만약 나의 모델이 큰 흐름을 가지고 있다면, 내 테스트 코드들은 크고 많은 더미 데이터를 필요로 할 것입니다.</p>\n<h2>Fat models는 SRP를 위반한다.</h2>\n<p>SRP(단일 책임 정책)은 클린 아키텍처의 5가지 원칙중의 하나로, 다음과 같은 원칙입니다. 자세한 내용은 다음에 <code class=\"language-text\">클린 아키텍처</code>라는\n책을 읽고 블로깅 할 예정입니다.</p>\n<ul>\n<li>클래스는 단 하나의 책임을 해야한다.</li>\n<li>클래스가 변경되는 이유는 단 한 개여야 한다.</li>\n</ul>\n<p>Fat models를 작성하다보면 많은 책임을 갖게 만듭니다. 예를 들어 User 모델은 user의 DB를 관리하는데 목적이 있습니다.<br>\nUser 모델에 메일을 보내거나 알림을 보내는 메소드를 작성하게 되면 어떤 알림이나 메일을 보내는 책임이 더해지는 것입니다.</p>\n<h2>흐름과 관련된 것이 아니라 attr을 변경하는 메소드를 작성하자</h2>\n<ul>\n<li>상태(attr)을 변경하는 것은 늘 행동(메소드)를 통해서 하세요. 매우 중요합니다.\n직접 변경하게 되면 트랙킹하기가 어려울 것입니다. 사이즈가 커지면 커질수록 더욱 어렵습니다.</li>\n<li>Django의 모델은 python 클래스의 일부입니다. OOP의 관점에서 객체의 상태는 행동(메소드)에 의해서 변경 되어야합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n    active <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    work_email <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    personal_email <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>다음과 같이 active의 상태를 변경하는 코드를 통해서 상태가 혼잡해지는 사태를 막을 수 있게 되었습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n    active <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    work_email <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    personal_email <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">deactivate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        self<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>update_fields<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"active\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>어떤 상태를 저장하는 것과 더불어 validation 하고 싶다면 다음과 같이 적으면 됩니다. 물론 DRF에서 validateion은\nserializer에 validate를 오버라이드 하면 됩니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n    active <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>BooleanField<span class=\"token punctuation\">(</span>default<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    work_email <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    personal_email <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>EmailField<span class=\"token punctuation\">(</span>null<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">deactivate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>active <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        self<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>update_fields<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"active\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">def</span> <span class=\"token function\">set_personal_email</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>work_email <span class=\"token operator\">==</span> email<span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>\n                  <span class=\"token string\">\"Personal email and work email are equal\"</span>\n              <span class=\"token punctuation\">)</span>\n          self<span class=\"token punctuation\">.</span>personal_email <span class=\"token operator\">=</span> email\n          self<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>update_fields<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"personal_email\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>의존성을 피하라</h2>\n<ul>\n<li>흐름 안에 있는 모델에서 다른 모델이나 클래스의 메소드를 호출하면 안됩니다.</li>\n<li>특히나 서드파티를 이용할수록 더욱 그렇습니다. 예를들어 가입하게되었을 때에 환영 이메일을 보낸다고 가정합시다.\n객체를 생성하는 코드에서 메일을 보낼 때에 서버에 이상이 생긴다면 생성되지도 않은 유저에게 이메일을 보내는 경우가 생깁니다.</li>\n</ul>\n<h2>model manager를 사용해라</h2>\n<ul>\n<li>모델 매니저를 사용하면 여기저기서 쿼리가 남발 되는 것을 막을 수 있습니다. 매니저를 사용하게 되면 테스트가 더욱 쉬워지고,\n한 곳에서만 변화를 만들 수 있습니다.</li>\n</ul>\n<h2>결론</h2>\n<p>제가 진행하고 있는 프로젝트에서는 다음과 같이 관리하기로 했습니다.</p>\n<ol>\n<li>models는 객체의 속성만 다루는 메소드를 작성한다.</li>\n<li>orm을 사용하여 query가 발생하는 메소드는 manager를 오버라이드하여 작성한다.</li>\n<li>\n<p>utils(service layer) 디렉토리를 만들어 기능단위로 파일을 만들어 관리한다.</p>\n<ul>\n<li>그중에서도 공통적으로 사용 가능한 부분은 또 따로 떼어낼 예정</li>\n</ul>\n</li>\n</ol>\n<br>\n<p>더 참고할 포스트가 있다면 댓글로 남겨주시면 감사하겠습니다.</p>\n<hr>\n<p>ref: <a href=\"https://medium.com/@jairvercosa/django-model-guideline-d48a96c9b38c\">Django model Guideline</a><br></p>","fields":{"tagSlugs":["/tags/django/"],"slug":"/python/django/manage-business-logic/"},"frontmatter":{"title":"Django/비지니스 로직 관리하기","tags":["django"],"date":"2020-07-03T13:08:10.000Z","description":"django를 사용할 때 비지니스 로직을 어떻게 관리하는지 알아봅시다.","path":"/python/django/manage-business-logic/","category":"Django"},"tableOfContents":"<ul>\n<li><a href=\"/python/django/manage-business-logic/#fat-models%EB%8A%94-%EB%84%88%EB%AC%B4-%EB%A7%8E%EC%9D%80-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%82%B8%EB%8B%A4\">Fat models는 너무 많은 의존성을 만들어낸다.</a></li>\n<li><a href=\"/python/django/manage-business-logic/#fat-models%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%96%B4%EB%A0%B5%EA%B2%8C-%ED%95%9C%EB%8B%A4\">Fat models는 테스트를 어렵게 한다.</a></li>\n<li><a href=\"/python/django/manage-business-logic/#fat-models%EB%8A%94-srp%EB%A5%BC-%EC%9C%84%EB%B0%98%ED%95%9C%EB%8B%A4\">Fat models는 SRP를 위반한다.</a></li>\n<li><a href=\"/python/django/manage-business-logic/#%ED%9D%90%EB%A6%84%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-attr%EC%9D%84-%EB%B3%80%EA%B2%BD%ED%95%98%EB%8A%94-%EB%A9%94%EC%86%8C%EB%93%9C%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EC%9E%90\">흐름과 관련된 것이 아니라 attr을 변경하는 메소드를 작성하자</a></li>\n<li><a href=\"/python/django/manage-business-logic/#%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%ED%94%BC%ED%95%98%EB%9D%BC\">의존성을 피하라</a></li>\n<li><a href=\"/python/django/manage-business-logic/#model-manager%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%9D%BC\">model manager를 사용해라</a></li>\n<li><a href=\"/python/django/manage-business-logic/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>","headings":[{"value":"Fat models는 너무 많은 의존성을 만들어낸다.","depth":2},{"value":"Fat models는 테스트를 어렵게 한다.","depth":2},{"value":"Fat models는 SRP를 위반한다.","depth":2},{"value":"흐름과 관련된 것이 아니라 attr을 변경하는 메소드를 작성하자","depth":2},{"value":"의존성을 피하라","depth":2},{"value":"model manager를 사용해라","depth":2},{"value":"결론","depth":2}]}},"pageContext":{"slug":"/python/django/manage-business-logic/"}},"staticQueryHashes":[]}