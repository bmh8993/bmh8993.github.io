{"componentChunkName":"component---src-templates-post-template-jsx","path":"/python/django/handle-media/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"bdbfc6a9-d008-5899-964b-eff00931bf50","html":"<h4>static and media</h4>\n<p>Django에서는 static과 media files를 다음과 같이 분류한다.</p>\n<ul>\n<li>Static Files: <code class=\"language-text\">개발 리소스</code>로서의 정적인 파일(js, css etc)</li>\n<li>Media Files: 이미지파일이나 유저가 업로드한 파일(image, pdf etc)</li>\n</ul>\n<hr>\n<h2>settings.py 세팅</h2>\n<h4>Media Files 전달 및 저장(settings.py)</h4>\n<ol>\n<li>view: <code class=\"language-text\">HttpRequest.FILES</code>를 통해 파일 전달</li>\n<li>view: <code class=\"language-text\">settings.MEDIA_ROOT</code> 디렉토리 하단에 파일 저장</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># root/project/settings.py</span>\n\n<span class=\"token comment\"># 각 media 파일에 대한 URL Prefix</span>\nMEDIA_URL <span class=\"token operator\">=</span> <span class=\"token string\">'/media/'</span>\n<span class=\"token comment\"># 미디어 파일을 보면 이미지 url이 다음과 같이 나온다</span>\n<span class=\"token comment\"># http://127.0.0.1:8000/media/Screen_Shot_2020-04-29_at_17.19.25.png</span>\n\n<span class=\"token comment\"># 업로드된 파일을 저장할 디렉토리 경로</span>\nMEDIA_ROOT <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'media'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>새롭게 세팅한 프로젝트 구조에서 <code class=\"language-text\">MEDIA_ROOT</code> 세팅하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">project__root_dir\n├── README.rst\n├── .gitignore\n├── config\n│   ├── __init__.py\n│   ├── settings\n│   │   ├── base.py\n│   │   ├── local.py\n│   │   ├── production.py\n│   │   └── test.py\n│   ├── urls.py\n│   └── wsgi\n│       ├── local.py\n│       ├── production.py\n│       └── test.py\n├── docs\n├── manage.py\n├── project_name\n│   └── static\n│       └── image\n├── requirements\n│   ├── base.txt\n│   ├── local.txt\n│   └── production.txt\n├── .config_secret\n│   ├── base.txt\n│   ├── local.txt\n│   └── production.txt\n├── setup.cfg\n└── tags</code></pre></div>\n<ul>\n<li>위와 같은 프로젝트 구조를 가지고 있다면 settings에 다음과 같이 추가해야한다.</li>\n<li>아래와 같이 추가하면 <code class=\"language-text\">MEDIA_ROOT</code>는 <code class=\"language-text\">project_name/static/image</code>가 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># config/settigns/base.py</span>\n\nROOT_DIR <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nMEDIA_ROOT <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ROOT_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"project__root_dir\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"project__root_dir\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"static\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"image\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<h2>ImageField(models.py)</h2>\n<ul>\n<li>ImageField: 이미지 저장을 지원하는 모델 필드(FileField 상속)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># example_app/models.py</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n<span class=\"token keyword\">from</span> users<span class=\"token punctuation\">.</span>models <span class=\"token keyword\">import</span> User\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Profile</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    user <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>OneToOneField<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    bio <span class=\"token operator\">=</span> modlels<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">240</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    city <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    avatar <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ImageField<span class=\"token punctuation\">(</span>blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> upload<span class=\"token operator\">=</span>to<span class=\"token operator\">=</span><span class=\"token string\">\"profile/avatar\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>username</code></pre></div>\n<h4>파일저장 세부경로</h4>\n<p>ImageField에 <code class=\"language-text\">upload_to=경로</code>와 같이 설정하면</p>\n<ul>\n<li>\n<p>저장경로</p>\n<ul>\n<li><code class=\"language-text\">settings.MEDIA_ROOT/파일명</code>경로에 저장</li>\n<li><code class=\"language-text\">MEDIA_ROOT/profile/avtar/xxxx.jpg</code> 경로에 저장</li>\n</ul>\n</li>\n<li>\n<p>DB</p>\n<ul>\n<li>파일명이 string으로 저장(추가적으로 string으로 저장되기 때문에 null=True가 아닌 blank=True)</li>\n<li><code class=\"language-text\">MEDIA_ROOT/profile/avtar/xxxx.jpg</code> 문자열 저장</li>\n</ul>\n</li>\n</ul>\n<h4>Pillow</h4>\n<ul>\n<li>PIL(Python Image Library)의 일종, 파이썬으로 이미지를 처리하고 싶을 때 사용</li>\n<li>Pillow는 PIL 프로젝트에서 fork 되어서 나온 라이브러리로, PIL이 python3를 지원하지\n않기 때문에 Pillow를 사용하는 추세</li>\n<li>이미지 관련 width, height, format, resize 작업을 수행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">$ pip install pillow</code></pre></div>\n<hr>\n<h2>개발환경에서의 media 파일 서빙(urls.py)</h2>\n<p>지금까지의 세팅을 마치면 디렉토리에 저장하고, DB에 경로를 저장하는 작업은 가능하다.\n하지만 서빙은 불가능하다. 즉, 데이터를 받아올 수가 없다. 더 쉽게는 이미지파일을 받아올 수\n없다는 것이다.</p>\n<ul>\n<li>여기서 서빙이란 server로부터 데이터를 받아오는 것을 <code class=\"language-text\">serving</code>이라고 한다.</li>\n</ul>\n<p>장고는 개발 서버에서 서빙을 지원해주지 않는다. 즉, <code class=\"language-text\">DEBUG=True</code>일 때의 서빙 rule을\n추가해줘야한다. <code class=\"language-text\">DEBUG=False</code>일 때에는 빈 리스트 리턴한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># config/urls.py</span>\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf <span class=\"token keyword\">import</span> settings\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>urls<span class=\"token punctuation\">.</span>static <span class=\"token keyword\">import</span> static\n\n<span class=\"token keyword\">if</span> settings<span class=\"token punctuation\">.</span>DEBUG<span class=\"token punctuation\">:</span>\n    urlpatterns <span class=\"token operator\">+=</span> static<span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>MEDIA_URL<span class=\"token punctuation\">,</span> document_root<span class=\"token operator\">=</span>settings<span class=\"token punctuation\">.</span>MEDIA_ROOT<span class=\"token punctuation\">)</span></code></pre></div>","fields":{"tagSlugs":["/tags/django/"],"slug":"/python/django/handle-media/"},"frontmatter":{"title":"Django / 미디어 파일(Media Files)을 위한 Django 세팅 + ImageField 다루기","tags":["django"],"date":"2020-05-07T13:06:20.000Z","description":"Django에서 미디어 파일을 다루는 방법에 대해서 알아봅시다.","path":"/python/django/handle-media/","category":"Django"},"tableOfContents":"<ul>\n<li>\n<ul>\n<li>\n<ul>\n<li><a href=\"/python/django/handle-media/#static-and-media\">static and media</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/python/django/handle-media/#settingspy-%EC%84%B8%ED%8C%85\">settings.py 세팅</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/python/django/handle-media/#media-files-%EC%A0%84%EB%8B%AC-%EB%B0%8F-%EC%A0%80%EC%9E%A5settingspy\">Media Files 전달 및 저장(settings.py)</a></li>\n<li><a href=\"/python/django/handle-media/#%EC%83%88%EB%A1%AD%EA%B2%8C-%EC%84%B8%ED%8C%85%ED%95%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0%EC%97%90%EC%84%9C-code-classlanguage-textmedia_rootcode-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0\">새롭게 세팅한 프로젝트 구조에서 &#x3C;code class=\"language-text\">MEDIA_ROOT&#x3C;/code> 세팅하기</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/python/django/handle-media/#imagefieldmodelspy\">ImageField(models.py)</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/python/django/handle-media/#%ED%8C%8C%EC%9D%BC%EC%A0%80%EC%9E%A5-%EC%84%B8%EB%B6%80%EA%B2%BD%EB%A1%9C\">파일저장 세부경로</a></li>\n<li><a href=\"/python/django/handle-media/#pillow\">Pillow</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/python/django/handle-media/#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C%EC%9D%98-media-%ED%8C%8C%EC%9D%BC-%EC%84%9C%EB%B9%99urlspy\">개발환경에서의 media 파일 서빙(urls.py)</a></li>\n</ul>","headings":[{"value":"static and media","depth":4},{"value":"settings.py 세팅","depth":2},{"value":"Media Files 전달 및 저장(settings.py)","depth":4},{"value":"새롭게 세팅한 프로젝트 구조에서 <code class=\"language-text\">MEDIA_ROOT</code> 세팅하기","depth":4},{"value":"ImageField(models.py)","depth":2},{"value":"파일저장 세부경로","depth":4},{"value":"Pillow","depth":4},{"value":"개발환경에서의 media 파일 서빙(urls.py)","depth":2}]}},"pageContext":{"slug":"/python/django/handle-media/"}},"staticQueryHashes":[]}