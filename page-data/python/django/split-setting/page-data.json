{"componentChunkName":"component---src-templates-post-template-jsx","path":"/python/django/split-setting/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"f8576704-3d67-50f7-bb85-97b189560f81","html":"<p>아래 내용은 <code class=\"language-text\">Two Scoops of Django</code>를 바탕으로 작성된 글입니다.</p>\n<h4>Two Scoops of Django</h4>\n<ul>\n<li>\n<p>3장 프로젝트 구성</p>\n<ul>\n<li>\n<p>쿠키커터</p>\n<ul>\n<li>Two Scoops of Django에서는 쿠키커터를 추천한다. 하지만 모든 옵션들을 다 이해할 수 없는\n상태에서 사용하려니 매우 과하게 느껴진다.</li>\n<li>구조만 따라하고 추후에 따라 필요한 것들 부가적으로 추가하고자 한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>4장 장고 앱 디자인의 기본</p>\n<ul>\n<li>한 번에 한 가지 일을 하고 그 한 가지 일을 매우 충실히 하는 프로그램을 짜는 것</li>\n</ul>\n</li>\n<li>\n<p>5장 settings와 requirements 파일</p>\n<ul>\n<li>개발환경, 배포환경, 테스트환경처럼 때에 따라 필요한 설정값과 변경 또는 추가해주어야하는 설정이 존재할 수 있음</li>\n<li>때마다 변경, 수정하는 번거로움 또는 누락 가능성으로 파일을 분리할 필요성이 생김</li>\n<li>마찬가지로 필요한 package도 다를 수 있기 때문에 requirements도 분리를 해야한다.</li>\n</ul>\n</li>\n</ul>\n<p>이번 포스팅에서는 프로젝트 구성과 함께 settings/requirements를 분리해보자</p>\n<hr>\n<h3>세팅하려는 프로젝트 구성</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">PROJECT_DIR\n├── README.rst\n├── config\n│   ├── __init__.py\n│   ├── settings\n│   │   ├── base.py\n│   │   ├── local_bmh.py\n│   │   ├── production.py\n│   │   └── test.py\n│   ├── urls.py\n│   └── wsgi\n│       ├── local.py\n│       ├── production.py\n│       └── test.py\n├── .config_secret\n│   ├── base.py\n│   ├── local.py\n│   ├── production.py\n│   └── test.py\n├── docs\n├── manage.py\n├── project_name\n├── requirements\n│   ├── base.txt\n│   ├── local.txt\n│   └── production.txt\n├── .gitignore\n└── setup.cfg</code></pre></div>\n<hr>\n<h3>세팅하기 이전에 몇 가지 중요사항들</h3>\n<ul>\n<li>세팅 변화에 대한 기록이 반드시 문서화 되어야하기 때문에 버전 컨트롤 시스템으로 모든 설정 파일을 관리해야한다.</li>\n<li>반복되는 설정들을 없애야한다. 기본 세팅 파일로부터 상속을 통해 이용해야한다.</li>\n<li>암호나 비밀키 등은 안전하게 보관해야한다. 보안 관련 사항은 버전관리 시스템에서 제외해야한다.</li>\n</ul>\n<hr>\n<h3>config: 여러 개의 settings 파일 이용하기</h3>\n<h4>settings 디렉터리를 사용하라</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">config/\n  settings/\n    __init__.py\n    base.py       <span class=\"token comment\"># 프로젝트의 모든 인스턴스에 적용되는 공용 세팅 파일</span>\n    local.py      <span class=\"token comment\"># 로컬 환경에서 작업할 때 쓰이는 파일. 디버그 모드, 로그 레벨,</span>\n                  <span class=\"token comment\"># django-debug-toolbar은 도구 활성화 등이 설정되어 있는 개발 전용</span>\n                  <span class=\"token comment\"># 로컬 파일이다. dev.py라고도 한다.</span>\n                  <span class=\"token comment\"># 운영 환경으로 코드가 완전히 이전되기 전에 관리자들이 확인을 위한</span>\n                  <span class=\"token comment\"># 서버에 사용</span>\n    production.py <span class=\"token comment\"># 운영서버에서 실제로 운영되는 세팅 파일. 이 파일에는 운영서버에서만</span>\n                  <span class=\"token comment\"># 필요한 설정들이 들어있다. prod.py라고도 한다.</span>\n    test.py       <span class=\"token comment\"># 테스트 러너(test runner), 인메모리 데이터베이스 정의, 로그세팅등을</span>\n                  <span class=\"token comment\"># 포함한 테스트를 위한 세팅</span></code></pre></div>\n<h4>나누어진 setting 파일은 어떻게 실행할까?</h4>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">python manage.py runserver --settings<span class=\"token operator\">=</span>config.settings.local_bmh</code></pre></div>\n<ul>\n<li>shell, makemigrations, migrate과 같은 다른 명령은 runserver 자리에 넣어서 동일하게 실행한다.</li>\n<li>django 공식문서에서는 여러개의 settings를 사용하면 django-admin을 사용하는 것을 권한다.</li>\n<li>\n<p><code class=\"language-text\">.zshrc</code>에 다음과 같이 선언하면 매번 길에 입력해야하는 귀찮은 일을 줄일 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token assign-left variable\">DJANGO_SETTINGS_MODULE</span><span class=\"token operator\">=</span>config.settings.local_bmh</code></pre></div>\n</li>\n</ul>\n<h4>다중 개발 환경 세팅</h4>\n<ul>\n<li>개발자마다 자기만의 환경이 필요한 경우가 있다.</li>\n<li>이럴 경우 하나의 local.py 세팅을 공유해서 사용하는 것에 어려움이 있을 수 있다.</li>\n<li>이럴 때는 버전 컨트롤 시스템에서 공유가 가능하며 관리가 가능하도록 <code class=\"language-text\">local_developer_name.py</code>\n과 같은 식으로 관리하면 편리하다. 이렇게 하면 잘못된 세팅을 했을 경우 동료 개발자가 체크할 수 있다.</li>\n</ul>\n<h4>wsgi 분리하기</h4>\n<ul>\n<li>\n<p>settings가 분리되면서 wsgi도 나누어야하는데 특별한 설정은 없고 위의 tree처럼 나눈 후 아래와 같이 수정하자</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>wsgi <span class=\"token keyword\">import</span> get_wsgi_application\n\nos<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token string\">\"DJANGO_SETTINGS_MODULE\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"config.settings.local_bmh\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 실행하는 settings을 1번째 인자로 설정하면된다.</span>\n\napplication <span class=\"token operator\">=</span> get_wsgi_application<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n<hr>\n<h3>.config_secret: 코드에서 비밀키 분리하기</h3>\n<p>세팅파일은 분리했는데 이제 특별하게 설정된 비밀키를 어딘가에 저장해서 사용해야한다.</p>\n<h4>비밀키 보호를 위한 방법</h4>\n<ul>\n<li>버전 컨트롤 시스템에서 제외한다.</li>\n<li>각 환경마다 비밀 정보가 다를 수 있다.(ex> DB정보, 사용하는 모듈의 비밀키) 그렇기때문에 공통된 객체로부터 상속받아 각 환경마다\n다른 세팅 파일로 나누어 버전 컨트롤 시스템에서 관리하는 것이다.</li>\n</ul>\n<h4>비밀키를 어딘가에 저장해서 사용해야한다.</h4>\n<ul>\n<li>버전컨트롤 시스템에 추가하면 안된다.</li>\n<li>코드 수정이 없어야한다.</li>\n<li>세팅 파일을 버번관리 시스템에 추가할 수 있어야한다. 세팅파일을 포함하여 모든 파이썬 파일은 버전 컨트롤 시스템에서 관리해야한다.</li>\n<li>두 가지 방법이 있다.</li>\n</ul>\n<br>\n<ol>\n<li>\n<p>환경 변수로 관리하기</p>\n<ul>\n<li>위키=> 환경변수란 프로세스가 컴퓨터에서 동작하는 방식에 영향을 미치는, 동적인 값들의 모임</li>\n<li>시스템의 실행파일이 놓여 있는 디렉토리의 지정 등 OS상에서 동작하는 응용소프트웨어가 참조하기 위한 설정이 기록된다.</li>\n<li>환경변수를 세팅하기 위해서 <code class=\"language-text\">.bashrc, .bash_profile, .profile, .zshrc</code> 파일에 추가하면 된다.</li>\n<li>\n<p>zsh를 사용하는 나는 <code class=\"language-text\">.zshrc</code>에 다음과 같은 구문을 넣는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">SOME_SECRET_KEY</span><span class=\"token operator\">=</span>secret_key</code></pre></div>\n</li>\n<li>\n<p>세팅 파일에서 환경 변수에 접근하는 방법</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\nSOME_SECRET_KEY <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">\"SOME_SECRET_KEY\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>비밀키가 존재하지 않을 때 예외처리하기</p>\n<ul>\n<li>비밀키가 존재하지 않으면 <code class=\"language-text\">KeyError</code>를 일으킬 수 있다.</li>\n<li>프로젝트가 시작되지 않는 문제보다 더 큰 문제는 그 원인을 알 수 없다는 것이다.</li>\n<li>디버그를 위한 에러메세지를 받아야한다.</li>\n<li>아래와 같은 함수를 선언하고 함수로 환경변수를 가져온다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\n<span class=\"token comment\"># 일반적으로 장고로부터 직접 무언가를 설정 파일로 임포트해 올 일은 없을 것이며 또한 해서도 안된다.</span>\n<span class=\"token comment\"># 단 ImproperlyConfigured는 예외다</span>\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>exceptions <span class=\"token keyword\">import</span> ImproperlyConfigured\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_env_variable</span><span class=\"token punctuation\">(</span>var_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token triple-quoted-string string\">\"\"\"환경 변수를 가져오거나 예외를 반환한다.\"\"\"</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span>var_name<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">except</span> KeyError<span class=\"token punctuation\">:</span>\n      error_msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"Set the </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>var_name<span class=\"token punctuation\">}</span></span><span class=\"token string\"> environment variable\"</span></span>\n      <span class=\"token keyword\">raise</span> improperlyConfigured<span class=\"token punctuation\">(</span>error_msg<span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>비밀파일로 관리하기</p>\n<ul>\n<li>환경 변수로 관리하는 방법은 때에 따라 적용되지 않을 수 있다. 책에서는 아파치를 웹 서버로 이용하는 경우라고 이야기하고 있다.\n아파치가 독립적인 환경 변수 시스템을 가지고 있기 때문이다.</li>\n<li>이런 경우에는 json 파일에 비밀 정보를 입력하고 참조할 수 있도록 세팅해야한다.</li>\n<li><code class=\"language-text\">.config_secret</code> 디렉토리를 만들고 json파일 안에 비밀 키를 넣는다.</li>\n<li><code class=\"language-text\">.config_secret</code>은 .gitignore에 추가해야한다.</li>\n<li>.config_secret/base.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"SECRET_KEY\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"SECRET_KEY\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"secret_key\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">BASE_DIR, ROOT_DIR, CONFIG_SECRET_DIR</code>의 path를 설정해서 json 파일을 읽어오도록 한다.</li>\n<li>config/settings/base.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># config/settings/base.py</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> json\n\n\nBASE_DIR <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nROOT_DIR <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">)</span>\nCONFIG_SECRET_DIR <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>ROOT_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">\".config_secret\"</span><span class=\"token punctuation\">)</span>\nCONFIG_SECRET_BASE_FILE <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>CONFIG_SECRET_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"base.json\"</span><span class=\"token punctuation\">)</span>\nCONFIG_SECRET_LOCAL_FILE <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>CONFIG_SECRET_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"local.json\"</span><span class=\"token punctuation\">)</span>\nCONFIG_SECRET_PRODUCTION_FILE <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>CONFIG_SECRET_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"production.json\"</span><span class=\"token punctuation\">)</span>\nCONFIG_SECRET_TEST_FILE <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>CONFIG_SECRET_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.json\"</span><span class=\"token punctuation\">)</span>\n\nconfig_secret_base <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>CONFIG_SECRET_BASE_FILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># SECRET_KEY</span>\nSECRET_KEY <span class=\"token operator\">=</span> config_secret_base<span class=\"token punctuation\">[</span><span class=\"token string\">\"SECRET_KEY\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"SECRET_KEY\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># APPS</span>\nDJANGO_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'django.contrib.admin'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"django.contrib.auth\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"django.contrib.contenttypes\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"django.contrib.sessions\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"django.contrib.messages\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"django.contrib.staticfiles\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nTHIRD_PARTY_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\nLOCAL_APPS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\nINSTALLED_APPS <span class=\"token operator\">=</span> DJANGO_APPS <span class=\"token operator\">+</span> THIRD_PARTY_APPS <span class=\"token operator\">+</span> LOCAL_APPS\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li>local 세팅은 다음과 같다.</li>\n<li>.config_secret/local.json</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"DATABASES\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"default\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"ENGINE\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"django.db.backends.mysql\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"NAME\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"USER\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"PASSWORD\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"HOST\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"PORT\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3306\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"TEST\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"CHARSET\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"utf8mb4\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"COLLATION\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"utf8mb4_general_ci\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"OPTIONS\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"charset\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"utf8mb4\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ALLOWED_HOSTS\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>config/settings/local_bmh.py</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>base <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n\n\n<span class=\"token comment\"># GENERAL</span>\nconfig_secret_local <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>CONFIG_SECRET_LOCAL_FILE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nDEBUG <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token comment\"># URLS</span>\nWSGI_APPLICATION <span class=\"token operator\">=</span> <span class=\"token string\">\"config.wsgi.local.application\"</span>  <span class=\"token comment\"># olaplan.wsgi.application</span>\nALLOWED_HOSTS <span class=\"token operator\">=</span> config_secret_local<span class=\"token punctuation\">[</span><span class=\"token string\">\"ALLOWED_HOSTS\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># APPS</span>\nINSTALLED_APPS <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"django_extensions\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"drf_yasg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># DATABASES</span>\nDATABASES <span class=\"token operator\">=</span> config_secret_local<span class=\"token punctuation\">[</span><span class=\"token string\">\"DATABASES\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n</ol>\n<hr>\n<h3>docs: 프로젝트 관련 문서 관리하기</h3>\n<hr>\n<h3>project_name: app 관리</h3>\n<hr>\n<h3>requirements: 개발 환경에 따라 필요한 package관리하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">requirements/\n\tbase.txt\n\tlocal.txt\n\tstaging.txt\n\tproduction.txt</code></pre></div>\n<ul>\n<li>\n<p>base.txt에는 공통적인 package를 넣어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Django=2.2.1\ndjangorestframework=3.1.1\n...</code></pre></div>\n</li>\n<li>다른 환경에서 필요한 패키지는 base를 기본으로 추가적으로 입력한다.</li>\n<li>\n<p>예시로 local.txt이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-r base.txt\ndjango-debug-toolbar==1.3.0\n...</code></pre></div>\n</li>\n</ul>\n<hr>\n<h3>setup.cfg</h3>\n<ul>\n<li>package관련 세팅을 setup.cfg에 입력하면된다.</li>\n<li>\n<p>예를들어 flkae8을 사용하는 나는 아래와 같이 세팅했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[flkae8]\nmax-line-length = 88\nselect = C,E,F,W,B,B950\nignore = E203, E501, W503</code></pre></div>\n</li>\n</ul>","fields":{"tagSlugs":["/tags/drf/"],"slug":"/python/django/split-setting/"},"frontmatter":{"title":"Django / settings 분리하기(프로젝트 구성하기)","tags":["DRF"],"date":"2020-04-13T20:04:51.000Z","description":"Django에서 서버 세팅을 분리하는 방법에 대해서 알아봅시다.","path":"/python/django/split-setting/","category":"Django"},"tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/python/django/split-setting/#two-scoops-of-django\">Two Scoops of Django</a></li>\n</ul>\n</li>\n<li><a href=\"/python/django/split-setting/#%EC%84%B8%ED%8C%85%ED%95%98%EB%A0%A4%EB%8A%94-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1\">세팅하려는 프로젝트 구성</a></li>\n<li><a href=\"/python/django/split-setting/#%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0-%EC%9D%B4%EC%A0%84%EC%97%90-%EB%AA%87-%EA%B0%80%EC%A7%80-%EC%A4%91%EC%9A%94%EC%82%AC%ED%95%AD%EB%93%A4\">세팅하기 이전에 몇 가지 중요사항들</a></li>\n<li>\n<p><a href=\"/python/django/split-setting/#config-%EC%97%AC%EB%9F%AC-%EA%B0%9C%EC%9D%98-settings-%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\">config: 여러 개의 settings 파일 이용하기</a></p>\n<ul>\n<li><a href=\"/python/django/split-setting/#settings-%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%9D%BC\">settings 디렉터리를 사용하라</a></li>\n<li><a href=\"/python/django/split-setting/#%EB%82%98%EB%88%84%EC%96%B4%EC%A7%84-setting-%ED%8C%8C%EC%9D%BC%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%8B%A4%ED%96%89%ED%95%A0%EA%B9%8C\">나누어진 setting 파일은 어떻게 실행할까?</a></li>\n<li><a href=\"/python/django/split-setting/#%EB%8B%A4%EC%A4%91-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85\">다중 개발 환경 세팅</a></li>\n<li><a href=\"/python/django/split-setting/#wsgi-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\">wsgi 분리하기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/python/django/split-setting/#config_secret-%EC%BD%94%EB%93%9C%EC%97%90%EC%84%9C-%EB%B9%84%EB%B0%80%ED%82%A4-%EB%B6%84%EB%A6%AC%ED%95%98%EA%B8%B0\">.config_secret: 코드에서 비밀키 분리하기</a></p>\n<ul>\n<li><a href=\"/python/django/split-setting/#%EB%B9%84%EB%B0%80%ED%82%A4-%EB%B3%B4%ED%98%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%B0%A9%EB%B2%95\">비밀키 보호를 위한 방법</a></li>\n<li><a href=\"/python/django/split-setting/#%EB%B9%84%EB%B0%80%ED%82%A4%EB%A5%BC-%EC%96%B4%EB%94%98%EA%B0%80%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%B4%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%9C%EB%8B%A4\">비밀키를 어딘가에 저장해서 사용해야한다.</a></li>\n</ul>\n</li>\n<li><a href=\"/python/django/split-setting/#docs-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B4%80%EB%A0%A8-%EB%AC%B8%EC%84%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\">docs: 프로젝트 관련 문서 관리하기</a></li>\n<li><a href=\"/python/django/split-setting/#project_name-app-%EA%B4%80%EB%A6%AC\">project_name: app 관리</a></li>\n<li><a href=\"/python/django/split-setting/#requirements-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD%EC%97%90-%EB%94%B0%EB%9D%BC-%ED%95%84%EC%9A%94%ED%95%9C-package%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0\">requirements: 개발 환경에 따라 필요한 package관리하기</a></li>\n<li><a href=\"/python/django/split-setting/#setupcfg\">setup.cfg</a></li>\n</ul>","headings":[{"value":"Two Scoops of Django","depth":4},{"value":"세팅하려는 프로젝트 구성","depth":3},{"value":"세팅하기 이전에 몇 가지 중요사항들","depth":3},{"value":"config: 여러 개의 settings 파일 이용하기","depth":3},{"value":"settings 디렉터리를 사용하라","depth":4},{"value":"나누어진 setting 파일은 어떻게 실행할까?","depth":4},{"value":"다중 개발 환경 세팅","depth":4},{"value":"wsgi 분리하기","depth":4},{"value":".config_secret: 코드에서 비밀키 분리하기","depth":3},{"value":"비밀키 보호를 위한 방법","depth":4},{"value":"비밀키를 어딘가에 저장해서 사용해야한다.","depth":4},{"value":"docs: 프로젝트 관련 문서 관리하기","depth":3},{"value":"project_name: app 관리","depth":3},{"value":"requirements: 개발 환경에 따라 필요한 package관리하기","depth":3},{"value":"setup.cfg","depth":3}]}},"pageContext":{"slug":"/python/django/split-setting/"}},"staticQueryHashes":[]}