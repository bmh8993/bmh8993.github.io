{"componentChunkName":"component---src-templates-post-template-jsx","path":"/python/django/drf-03-validation/","result":{"data":{"site":{"siteMetadata":{"title":"Blog by 인간지능","subtitle":"깔끔한 프로그래밍","copyright":"© All rights reserved.","author":{"name":"인간지능","twitter":"#"},"disqusShortname":"bmh8993-github-io","url":"https://bmh8993.github.io/"}},"markdownRemark":{"id":"49df5826-e89e-5ef7-b6a4-5599e8f37359","html":"<p>DRF의 validation에 대해서 알아봅시다.</p>\n<p>데이터를 deserializing을 한 이후에, deserializing한 데이터를 사용하기 전에 항상 <code class=\"language-text\">.is_valid()</code>를\n호출하도록 되어져 있습니다. 만약 에러가 발생하면, <code class=\"language-text\">.errors</code>를 통해서 에러 메세지를 확인할 수 있습니다.<br>\n특별히 나눌 것은 아니라고 생각되지만 object level validation과 field level validation이 존재합니다.</p>\n<h4>object level validation</h4>\n<ul>\n<li>\n<p>여러 필드에 대한 validation을 진행합니다. serializer 클래스에 <code class=\"language-text\">validate</code>메서드를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>Serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">\"description\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> serializers<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Titile and Description must be different from one another\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> data</code></pre></div>\n</li>\n</ul>\n<h4>field level validation</h4>\n<ul>\n<li>\n<p>serializer 클래스에 <code class=\"language-text\">vailidate_{field_name}</code>함수를 추가해서 사용자 정의 필드 수준 유효성\n검사를 진행할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleSerializer</span><span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>Serializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">validate_title</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> serializers<span class=\"token punctuation\">.</span>ValidationError<span class=\"token punctuation\">(</span><span class=\"token string\">\"The title has to be at least 30 chars long!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> value</code></pre></div>\n</li>\n</ul>","fields":{"tagSlugs":["/tags/drf/"],"slug":"/python/django/drf-03-validation/"},"frontmatter":{"title":"Django/DRF#03 validation","tags":["DRF"],"date":"2020-04-20T08:04:25.000Z","description":"DRF의 validation에 대해서 알아봅시다.","path":"/python/django/drf-03-validation/","category":"Django"},"tableOfContents":"<ul>\n<li><a href=\"/python/django/drf-03-validation/#object-level-validation\">object level validation</a></li>\n<li><a href=\"/python/django/drf-03-validation/#field-level-validation\">field level validation</a></li>\n</ul>","headings":[{"value":"object level validation","depth":4},{"value":"field level validation","depth":4}]}},"pageContext":{"slug":"/python/django/drf-03-validation/"}},"staticQueryHashes":[]}